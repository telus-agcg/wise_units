use crate::{
    base_units, derived_units,
    tokens::{Dimension, UnitValue},
    UcumUnit,
};

use num_rational::Ratio;

#[derive(Debug, Clone, Copy)]
pub enum AtomSymbol {
    Meter(base_units::Meter),
    Second(base_units::Second),
    Gram(base_units::Gram),
    Radian(base_units::Radian),
    Kelvin(base_units::Kelvin),
    Coulomb(base_units::Coulomb),
    Candela(base_units::Candela),
    TheNumberTenForArbitraryPowers10star(derived_units::TheNumberTenForArbitraryPowers10star),
    TheNumberTenForArbitraryPowers10caret(derived_units::TheNumberTenForArbitraryPowers10caret),
    TheNumberPi(derived_units::TheNumberPi),
    Percent(derived_units::Percent),
    PartsPerThousand(derived_units::PartsPerThousand),
    PartsPerMillion(derived_units::PartsPerMillion),
    PartsPerBillion(derived_units::PartsPerBillion),
    PartsPerTrillion(derived_units::PartsPerTrillion),
    Mole(derived_units::Mole),
    Steradian(derived_units::Steradian),
    Hertz(derived_units::Hertz),
    Newton(derived_units::Newton),
    Pascal(derived_units::Pascal),
    Joule(derived_units::Joule),
    Watt(derived_units::Watt),
    Ampere(derived_units::Ampere),
    Volt(derived_units::Volt),
    Farad(derived_units::Farad),
    Ohm(derived_units::Ohm),
    Siemens(derived_units::Siemens),
    Weber(derived_units::Weber),
    DegreeCelsius(derived_units::DegreeCelsius),
    Tesla(derived_units::Tesla),
    Henry(derived_units::Henry),
    Lumen(derived_units::Lumen),
    Lux(derived_units::Lux),
    Becquerel(derived_units::Becquerel),
    Gray(derived_units::Gray),
    Sievert(derived_units::Sievert),
    Gon(derived_units::Gon),
    Degree(derived_units::Degree),
    MinuteTick(derived_units::MinuteTick),
    SecondAngle(derived_units::SecondAngle),
    LiterL(derived_units::LiterL),
    LiterUsL(derived_units::LiterUsL),
    Are(derived_units::Are),
    MinuteMin(derived_units::MinuteMin),
    Hour(derived_units::Hour),
    Day(derived_units::Day),
    TropicalYear(derived_units::TropicalYear),
    MeanJulianYear(derived_units::MeanJulianYear),
    MeanGregorianYear(derived_units::MeanGregorianYear),
    Year(derived_units::Year),
    Week(derived_units::Week),
    SynodalMonth(derived_units::SynodalMonth),
    MeanJulianMonth(derived_units::MeanJulianMonth),
    MeanGregorianMonth(derived_units::MeanGregorianMonth),
    Month(derived_units::Month),
    Tonne(derived_units::Tonne),
    Bar(derived_units::Bar),
    UnifiedAtomicMassUnit(derived_units::UnifiedAtomicMassUnit),
    Electronvolt(derived_units::Electronvolt),
    AstronomicUnit(derived_units::AstronomicUnit),
    Parsec(derived_units::Parsec),
    VelocityOfLight(derived_units::VelocityOfLight),
    PlanckConstant(derived_units::PlanckConstant),
    BoltzmannConstant(derived_units::BoltzmannConstant),
    PermittivityOfVacuum(derived_units::PermittivityOfVacuum),
    PermeabilityOfVacuum(derived_units::PermeabilityOfVacuum),
    ElementaryCharge(derived_units::ElementaryCharge),
    ElectronMass(derived_units::ElectronMass),
    ProtonMass(derived_units::ProtonMass),
    NewtonianConstantOfGravitation(derived_units::NewtonianConstantOfGravitation),
    StandardAccelerationOfFreeFall(derived_units::StandardAccelerationOfFreeFall),
    StandardAtmosphere(derived_units::StandardAtmosphere),
    LightYear(derived_units::LightYear),
    GramForce(derived_units::GramForce),
    PoundForce(derived_units::PoundForce),
    Kayser(derived_units::Kayser),
    Gal(derived_units::Gal),
    Dyne(derived_units::Dyne),
    Erg(derived_units::Erg),
    Poise(derived_units::Poise),
    Biot(derived_units::Biot),
    Stokes(derived_units::Stokes),
    Maxwell(derived_units::Maxwell),
    Gauss(derived_units::Gauss),
    Oersted(derived_units::Oersted),
    Gilbert(derived_units::Gilbert),
    Stilb(derived_units::Stilb),
    Lambert(derived_units::Lambert),
    Phot(derived_units::Phot),
    Curie(derived_units::Curie),
    Roentgen(derived_units::Roentgen),
    RadiationAbsorbedDose(derived_units::RadiationAbsorbedDose),
    RadiationEquivalentMan(derived_units::RadiationEquivalentMan),
    InchInI(derived_units::InchInI),
    FootFtI(derived_units::FootFtI),
    YardYdI(derived_units::YardYdI),
    MileMiI(derived_units::MileMiI),
    FathomFthI(derived_units::FathomFthI),
    NauticalMileNmiI(derived_units::NauticalMileNmiI),
    KnotKnI(derived_units::KnotKnI),
    SquareInch(derived_units::SquareInch),
    SquareFoot(derived_units::SquareFoot),
    SquareYard(derived_units::SquareYard),
    CubicInch(derived_units::CubicInch),
    CubicFoot(derived_units::CubicFoot),
    CubicYard(derived_units::CubicYard),
    BoardFoot(derived_units::BoardFoot),
    CordCrI(derived_units::CordCrI),
    MilMilI(derived_units::MilMilI),
    CircularMil(derived_units::CircularMil),
    Hand(derived_units::Hand),
    FootFtUs(derived_units::FootFtUs),
    YardYdUs(derived_units::YardYdUs),
    InchInUs(derived_units::InchInUs),
    RodRdUs(derived_units::RodRdUs),
    GuntersChainChUs(derived_units::GuntersChainChUs),
    LinkForGuntersChainLkUs(derived_units::LinkForGuntersChainLkUs),
    RamdensChain(derived_units::RamdensChain),
    LinkForRamdensChain(derived_units::LinkForRamdensChain),
    FathomFthUs(derived_units::FathomFthUs),
    Furlong(derived_units::Furlong),
    MileMiUs(derived_units::MileMiUs),
    AcreAcrUs(derived_units::AcreAcrUs),
    SquareRod(derived_units::SquareRod),
    SquareMile(derived_units::SquareMile),
    Section(derived_units::Section),
    Township(derived_units::Township),
    MilMilUs(derived_units::MilMilUs),
    InchInBr(derived_units::InchInBr),
    FootFtBr(derived_units::FootFtBr),
    RodRdBr(derived_units::RodRdBr),
    GuntersChainChBr(derived_units::GuntersChainChBr),
    LinkForGuntersChainLkBr(derived_units::LinkForGuntersChainLkBr),
    FathomFthBr(derived_units::FathomFthBr),
    Pace(derived_units::Pace),
    YardYdBr(derived_units::YardYdBr),
    MileMiBr(derived_units::MileMiBr),
    NauticalMileNmiBr(derived_units::NauticalMileNmiBr),
    KnotKnBr(derived_units::KnotKnBr),
    AcreAcrBr(derived_units::AcreAcrBr),
    QueenAnnesWineGallon(derived_units::QueenAnnesWineGallon),
    Barrel(derived_units::Barrel),
    QuartQtUs(derived_units::QuartQtUs),
    PintPtUs(derived_units::PintPtUs),
    GillGilUs(derived_units::GillGilUs),
    FluidOunceFozUs(derived_units::FluidOunceFozUs),
    FluidDramFdrUs(derived_units::FluidDramFdrUs),
    MinimMinUs(derived_units::MinimMinUs),
    CordCrdUs(derived_units::CordCrdUs),
    BushelBuUs(derived_units::BushelBuUs),
    HistoricalWinchesterGallon(derived_units::HistoricalWinchesterGallon),
    PeckPkUs(derived_units::PeckPkUs),
    DryQuart(derived_units::DryQuart),
    DryPint(derived_units::DryPint),
    Tablespoon(derived_units::Tablespoon),
    Teaspoon(derived_units::Teaspoon),
    Cup(derived_units::Cup),
    MetricFluidOunce(derived_units::MetricFluidOunce),
    MetricCup(derived_units::MetricCup),
    MetricTeaspoon(derived_units::MetricTeaspoon),
    MetricTablespoon(derived_units::MetricTablespoon),
    Gallon(derived_units::Gallon),
    PeckPkBr(derived_units::PeckPkBr),
    BushelBuBr(derived_units::BushelBuBr),
    QuartQtBr(derived_units::QuartQtBr),
    PintPtBr(derived_units::PintPtBr),
    GillGilBr(derived_units::GillGilBr),
    FluidOunceFozBr(derived_units::FluidOunceFozBr),
    FluidDramFdrBr(derived_units::FluidDramFdrBr),
    MinimMinBr(derived_units::MinimMinBr),
    Grain(derived_units::Grain),
    PoundLbAv(derived_units::PoundLbAv),
    OunceOzAv(derived_units::OunceOzAv),
    DramDrAv(derived_units::DramDrAv),
    ShortHundredweight(derived_units::ShortHundredweight),
    LongHunderdweight(derived_units::LongHunderdweight),
    ShortTon(derived_units::ShortTon),
    LongTon(derived_units::LongTon),
    Stone(derived_units::Stone),
    Pennyweight(derived_units::Pennyweight),
    OunceOzTr(derived_units::OunceOzTr),
    PoundLbTr(derived_units::PoundLbTr),
    Scruple(derived_units::Scruple),
    DramDrAp(derived_units::DramDrAp),
    OunceOzAp(derived_units::OunceOzAp),
    PoundLbAp(derived_units::PoundLbAp),
    MetricOunce(derived_units::MetricOunce),
    Line(derived_units::Line),
    Point(derived_units::Point),
    Pica(derived_units::Pica),
    PrintersPoint(derived_units::PrintersPoint),
    PrintersPica(derived_units::PrintersPica),
    Pied(derived_units::Pied),
    Pouce(derived_units::Pouce),
    Ligne(derived_units::Ligne),
    Didot(derived_units::Didot),
    Cicero(derived_units::Cicero),
    DegreeRankine(derived_units::DegreeRankine),
    CalorieAt15DegC(derived_units::CalorieAt15DegC),
    CalorieAt20DegC(derived_units::CalorieAt20DegC),
    MeanCalorie(derived_units::MeanCalorie),
    InternationalTableCalorie(derived_units::InternationalTableCalorie),
    ThermochemicalCalorie(derived_units::ThermochemicalCalorie),
    Calorie(derived_units::Calorie),
    NutritionLabelCalories(derived_units::NutritionLabelCalories),
    BritishThermalUnitAt39DegF(derived_units::BritishThermalUnitAt39DegF),
    BritishThermalUnitAt59DegF(derived_units::BritishThermalUnitAt59DegF),
    BritishThermalUnitAt60DegF(derived_units::BritishThermalUnitAt60DegF),
    MeanBritishThermalUnit(derived_units::MeanBritishThermalUnit),
    InternationalTableBritishThermalUnit(derived_units::InternationalTableBritishThermalUnit),
    ThermochemicalBritishThermalUnit(derived_units::ThermochemicalBritishThermalUnit),
    BritishThermalUnit(derived_units::BritishThermalUnit),
    Horsepower(derived_units::Horsepower),
    Tex(derived_units::Tex),
    Denier(derived_units::Denier),
    MeterOfWaterColumn(derived_units::MeterOfWaterColumn),
    MeterOfMercuryColumn(derived_units::MeterOfMercuryColumn),
    InchOfWaterColumn(derived_units::InchOfWaterColumn),
    InchOfMercuryColumn(derived_units::InchOfMercuryColumn),
    PeripheralVascularResistanceUnit(derived_units::PeripheralVascularResistanceUnit),
    WoodUnit(derived_units::WoodUnit),
    Diopter(derived_units::Diopter),
    Mesh(derived_units::Mesh),
    Charriere(derived_units::Charriere),
    Drop(derived_units::Drop),
    HounsfieldUnit(derived_units::HounsfieldUnit),
    MetabolicEquivalent(derived_units::MetabolicEquivalent),
    HomeopathicPotencyOfDecimalHahnemannianSeries(
        derived_units::HomeopathicPotencyOfDecimalHahnemannianSeries,
    ),
    HomeopathicPotencyOfCentesimalHahnemannianSeries(
        derived_units::HomeopathicPotencyOfCentesimalHahnemannianSeries,
    ),
    HomeopathicPotencyOfMillesimalHahnemannianSeries(
        derived_units::HomeopathicPotencyOfMillesimalHahnemannianSeries,
    ),
    HomeopathicPotencyOfQuintamillesimalHahnemannianSeries(
        derived_units::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries,
    ),
    HomeopathicPotencyOfDecimalKorsakovianSeries(
        derived_units::HomeopathicPotencyOfDecimalKorsakovianSeries,
    ),
    HomeopathicPotencyOfCentesimalKorsakovianSeries(
        derived_units::HomeopathicPotencyOfCentesimalKorsakovianSeries,
    ),
    HomeopathicPotencyOfMillesimalKorsakovianSeries(
        derived_units::HomeopathicPotencyOfMillesimalKorsakovianSeries,
    ),
    HomeopathicPotencyOfQuintamillesimalKorsakovianSeries(
        derived_units::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries,
    ),
    Equivalents(derived_units::Equivalents),
    Osmole(derived_units::Osmole),
    GramPercent(derived_units::GramPercent),
    SvedbergUnit(derived_units::SvedbergUnit),
    HighPowerField(derived_units::HighPowerField),
    LowPowerField(derived_units::LowPowerField),
    Katal(derived_units::Katal),
    Unit(derived_units::Unit),
    InternationalUnitIU(derived_units::InternationalUnitIU),
    InternationalUnitIu(derived_units::InternationalUnitIu),
    ArbitraryUnit(derived_units::ArbitraryUnit),
    UnitedStatesPharmacopeiaUnit(derived_units::UnitedStatesPharmacopeiaUnit),
    GplUnit(derived_units::GplUnit),
    MplUnit(derived_units::MplUnit),
    AplUnit(derived_units::AplUnit),
    BethesdaUnit(derived_units::BethesdaUnit),
    AntiFactorXaUnit(derived_units::AntiFactorXaUnit),
    ToddUnit(derived_units::ToddUnit),
    DyeUnit(derived_units::DyeUnit),
    SomogyiUnit(derived_units::SomogyiUnit),
    BodanskyUnit(derived_units::BodanskyUnit),
    KingArmstrongUnit(derived_units::KingArmstrongUnit),
    KunkelUnit(derived_units::KunkelUnit),
    MacLaganUnit(derived_units::MacLaganUnit),
    TuberculinUnit(derived_units::TuberculinUnit),
    FiftyPercentCellCultureInfectiousDose(derived_units::FiftyPercentCellCultureInfectiousDose),
    FiftyPercentTissueCultureInfectiousDose(derived_units::FiftyPercentTissueCultureInfectiousDose),
    FiftyPercentEmbryoInfectiousDose(derived_units::FiftyPercentEmbryoInfectiousDose),
    PlaqueFormingUnits(derived_units::PlaqueFormingUnits),
    FocusFormingUnits(derived_units::FocusFormingUnits),
    ColonyFormingUnits(derived_units::ColonyFormingUnits),
    IndexOfReactivity(derived_units::IndexOfReactivity),
    BioequivalentAllergenUnit(derived_units::BioequivalentAllergenUnit),
    AllergenUnit(derived_units::AllergenUnit),
    AllergenUnitForAmbrosiaArtemisiifolia(derived_units::AllergenUnitForAmbrosiaArtemisiifolia),
    ProteinNitrogenUnit(derived_units::ProteinNitrogenUnit),
    LimitOfFlocculation(derived_units::LimitOfFlocculation),
    DAntigenUnit(derived_units::DAntigenUnit),
    FibrinogenEquivalentUnit(derived_units::FibrinogenEquivalentUnit),
    ElisaUnit(derived_units::ElisaUnit),
    EhrlichUnit(derived_units::EhrlichUnit),
    Stere(derived_units::Stere),
    Angstrom(derived_units::Angstrom),
    Barn(derived_units::Barn),
    TechnicalAtmosphere(derived_units::TechnicalAtmosphere),
    Mho(derived_units::Mho),
    PoundPerSquareInch(derived_units::PoundPerSquareInch),
    Circle(derived_units::Circle),
    Spere(derived_units::Spere),
    MetricCarat(derived_units::MetricCarat),
    CaratOfGoldAlloys(derived_units::CaratOfGoldAlloys),
    Smoot(derived_units::Smoot),
    Bit(derived_units::Bit),
    Byte(derived_units::Byte),
    Baud(derived_units::Baud),
}

impl AtomSymbol {
    // #[allow(clippy::too_many_lines)]
    #[must_use]
    pub fn primary_code(&self) -> &'static str {
        match self {
            Self::Meter(u) => u.primary_code(),
            Self::Second(u) => u.primary_code(),
            Self::Gram(u) => u.primary_code(),
            Self::Radian(u) => u.primary_code(),
            Self::Kelvin(u) => u.primary_code(),
            Self::Coulomb(u) => u.primary_code(),
            Self::Candela(u) => u.primary_code(),
            Self::TheNumberTenForArbitraryPowers10star(u) => u.primary_code(),
            Self::TheNumberTenForArbitraryPowers10caret(u) => u.primary_code(),
            Self::TheNumberPi(u) => u.primary_code(),
            Self::Percent(u) => u.primary_code(),
            Self::PartsPerThousand(u) => u.primary_code(),
            Self::PartsPerMillion(u) => u.primary_code(),
            Self::PartsPerBillion(u) => u.primary_code(),
            Self::PartsPerTrillion(u) => u.primary_code(),
            Self::Mole(u) => u.primary_code(),
            Self::Steradian(u) => u.primary_code(),
            Self::Hertz(u) => u.primary_code(),
            Self::Newton(u) => u.primary_code(),
            Self::Pascal(u) => u.primary_code(),
            Self::Joule(u) => u.primary_code(),
            Self::Watt(u) => u.primary_code(),
            Self::Ampere(u) => u.primary_code(),
            Self::Volt(u) => u.primary_code(),
            Self::Farad(u) => u.primary_code(),
            Self::Ohm(u) => u.primary_code(),
            Self::Siemens(u) => u.primary_code(),
            Self::Weber(u) => u.primary_code(),
            Self::DegreeCelsius(u) => u.primary_code(),
            Self::Tesla(u) => u.primary_code(),
            Self::Henry(u) => u.primary_code(),
            Self::Lumen(u) => u.primary_code(),
            Self::Lux(u) => u.primary_code(),
            Self::Becquerel(u) => u.primary_code(),
            Self::Gray(u) => u.primary_code(),
            Self::Sievert(u) => u.primary_code(),
            Self::Gon(u) => u.primary_code(),
            Self::Degree(u) => u.primary_code(),
            Self::MinuteTick(u) => u.primary_code(),
            Self::SecondAngle(u) => u.primary_code(),
            Self::LiterL(u) => u.primary_code(),
            Self::LiterUsL(u) => u.primary_code(),
            Self::Are(u) => u.primary_code(),
            Self::MinuteMin(u) => u.primary_code(),
            Self::Hour(u) => u.primary_code(),
            Self::Day(u) => u.primary_code(),
            Self::TropicalYear(u) => u.primary_code(),
            Self::MeanJulianYear(u) => u.primary_code(),
            Self::MeanGregorianYear(u) => u.primary_code(),
            Self::Year(u) => u.primary_code(),
            Self::Week(u) => u.primary_code(),
            Self::SynodalMonth(u) => u.primary_code(),
            Self::MeanJulianMonth(u) => u.primary_code(),
            Self::MeanGregorianMonth(u) => u.primary_code(),
            Self::Month(u) => u.primary_code(),
            Self::Tonne(u) => u.primary_code(),
            Self::Bar(u) => u.primary_code(),
            Self::UnifiedAtomicMassUnit(u) => u.primary_code(),
            Self::Electronvolt(u) => u.primary_code(),
            Self::AstronomicUnit(u) => u.primary_code(),
            Self::Parsec(u) => u.primary_code(),
            Self::VelocityOfLight(u) => u.primary_code(),
            Self::PlanckConstant(u) => u.primary_code(),
            Self::BoltzmannConstant(u) => u.primary_code(),
            Self::PermittivityOfVacuum(u) => u.primary_code(),
            Self::PermeabilityOfVacuum(u) => u.primary_code(),
            Self::ElementaryCharge(u) => u.primary_code(),
            Self::ElectronMass(u) => u.primary_code(),
            Self::ProtonMass(u) => u.primary_code(),
            Self::NewtonianConstantOfGravitation(u) => u.primary_code(),
            Self::StandardAccelerationOfFreeFall(u) => u.primary_code(),
            Self::StandardAtmosphere(u) => u.primary_code(),
            Self::LightYear(u) => u.primary_code(),
            Self::GramForce(u) => u.primary_code(),
            Self::PoundForce(u) => u.primary_code(),
            Self::Kayser(u) => u.primary_code(),
            Self::Gal(u) => u.primary_code(),
            Self::Dyne(u) => u.primary_code(),
            Self::Erg(u) => u.primary_code(),
            Self::Poise(u) => u.primary_code(),
            Self::Biot(u) => u.primary_code(),
            Self::Stokes(u) => u.primary_code(),
            Self::Maxwell(u) => u.primary_code(),
            Self::Gauss(u) => u.primary_code(),
            Self::Oersted(u) => u.primary_code(),
            Self::Gilbert(u) => u.primary_code(),
            Self::Stilb(u) => u.primary_code(),
            Self::Lambert(u) => u.primary_code(),
            Self::Phot(u) => u.primary_code(),
            Self::Curie(u) => u.primary_code(),
            Self::Roentgen(u) => u.primary_code(),
            Self::RadiationAbsorbedDose(u) => u.primary_code(),
            Self::RadiationEquivalentMan(u) => u.primary_code(),
            Self::InchInI(u) => u.primary_code(),
            Self::FootFtI(u) => u.primary_code(),
            Self::YardYdI(u) => u.primary_code(),
            Self::MileMiI(u) => u.primary_code(),
            Self::FathomFthI(u) => u.primary_code(),
            Self::NauticalMileNmiI(u) => u.primary_code(),
            Self::KnotKnI(u) => u.primary_code(),
            Self::SquareInch(u) => u.primary_code(),
            Self::SquareFoot(u) => u.primary_code(),
            Self::SquareYard(u) => u.primary_code(),
            Self::CubicInch(u) => u.primary_code(),
            Self::CubicFoot(u) => u.primary_code(),
            Self::CubicYard(u) => u.primary_code(),
            Self::BoardFoot(u) => u.primary_code(),
            Self::CordCrI(u) => u.primary_code(),
            Self::MilMilI(u) => u.primary_code(),
            Self::CircularMil(u) => u.primary_code(),
            Self::Hand(u) => u.primary_code(),
            Self::FootFtUs(u) => u.primary_code(),
            Self::YardYdUs(u) => u.primary_code(),
            Self::InchInUs(u) => u.primary_code(),
            Self::RodRdUs(u) => u.primary_code(),
            Self::GuntersChainChUs(u) => u.primary_code(),
            Self::LinkForGuntersChainLkUs(u) => u.primary_code(),
            Self::RamdensChain(u) => u.primary_code(),
            Self::LinkForRamdensChain(u) => u.primary_code(),
            Self::FathomFthUs(u) => u.primary_code(),
            Self::Furlong(u) => u.primary_code(),
            Self::MileMiUs(u) => u.primary_code(),
            Self::AcreAcrUs(u) => u.primary_code(),
            Self::SquareRod(u) => u.primary_code(),
            Self::SquareMile(u) => u.primary_code(),
            Self::Section(u) => u.primary_code(),
            Self::Township(u) => u.primary_code(),
            Self::MilMilUs(u) => u.primary_code(),
            Self::InchInBr(u) => u.primary_code(),
            Self::FootFtBr(u) => u.primary_code(),
            Self::RodRdBr(u) => u.primary_code(),
            Self::GuntersChainChBr(u) => u.primary_code(),
            Self::LinkForGuntersChainLkBr(u) => u.primary_code(),
            Self::FathomFthBr(u) => u.primary_code(),
            Self::Pace(u) => u.primary_code(),
            Self::YardYdBr(u) => u.primary_code(),
            Self::MileMiBr(u) => u.primary_code(),
            Self::NauticalMileNmiBr(u) => u.primary_code(),
            Self::KnotKnBr(u) => u.primary_code(),
            Self::AcreAcrBr(u) => u.primary_code(),
            Self::QueenAnnesWineGallon(u) => u.primary_code(),
            Self::Barrel(u) => u.primary_code(),
            Self::QuartQtUs(u) => u.primary_code(),
            Self::PintPtUs(u) => u.primary_code(),
            Self::GillGilUs(u) => u.primary_code(),
            Self::FluidOunceFozUs(u) => u.primary_code(),
            Self::FluidDramFdrUs(u) => u.primary_code(),
            Self::MinimMinUs(u) => u.primary_code(),
            Self::CordCrdUs(u) => u.primary_code(),
            Self::BushelBuUs(u) => u.primary_code(),
            Self::HistoricalWinchesterGallon(u) => u.primary_code(),
            Self::PeckPkUs(u) => u.primary_code(),
            Self::DryQuart(u) => u.primary_code(),
            Self::DryPint(u) => u.primary_code(),
            Self::Tablespoon(u) => u.primary_code(),
            Self::Teaspoon(u) => u.primary_code(),
            Self::Cup(u) => u.primary_code(),
            Self::MetricFluidOunce(u) => u.primary_code(),
            Self::MetricCup(u) => u.primary_code(),
            Self::MetricTeaspoon(u) => u.primary_code(),
            Self::MetricTablespoon(u) => u.primary_code(),
            Self::Gallon(u) => u.primary_code(),
            Self::PeckPkBr(u) => u.primary_code(),
            Self::BushelBuBr(u) => u.primary_code(),
            Self::QuartQtBr(u) => u.primary_code(),
            Self::PintPtBr(u) => u.primary_code(),
            Self::GillGilBr(u) => u.primary_code(),
            Self::FluidOunceFozBr(u) => u.primary_code(),
            Self::FluidDramFdrBr(u) => u.primary_code(),
            Self::MinimMinBr(u) => u.primary_code(),
            Self::Grain(u) => u.primary_code(),
            Self::PoundLbAv(u) => u.primary_code(),
            Self::OunceOzAv(u) => u.primary_code(),
            Self::DramDrAv(u) => u.primary_code(),
            Self::ShortHundredweight(u) => u.primary_code(),
            Self::LongHunderdweight(u) => u.primary_code(),
            Self::ShortTon(u) => u.primary_code(),
            Self::LongTon(u) => u.primary_code(),
            Self::Stone(u) => u.primary_code(),
            Self::Pennyweight(u) => u.primary_code(),
            Self::OunceOzTr(u) => u.primary_code(),
            Self::PoundLbTr(u) => u.primary_code(),
            Self::Scruple(u) => u.primary_code(),
            Self::DramDrAp(u) => u.primary_code(),
            Self::OunceOzAp(u) => u.primary_code(),
            Self::PoundLbAp(u) => u.primary_code(),
            Self::MetricOunce(u) => u.primary_code(),
            Self::Line(u) => u.primary_code(),
            Self::Point(u) => u.primary_code(),
            Self::Pica(u) => u.primary_code(),
            Self::PrintersPoint(u) => u.primary_code(),
            Self::PrintersPica(u) => u.primary_code(),
            Self::Pied(u) => u.primary_code(),
            Self::Pouce(u) => u.primary_code(),
            Self::Ligne(u) => u.primary_code(),
            Self::Didot(u) => u.primary_code(),
            Self::Cicero(u) => u.primary_code(),
            Self::DegreeRankine(u) => u.primary_code(),
            Self::CalorieAt15DegC(u) => u.primary_code(),
            Self::CalorieAt20DegC(u) => u.primary_code(),
            Self::MeanCalorie(u) => u.primary_code(),
            Self::InternationalTableCalorie(u) => u.primary_code(),
            Self::ThermochemicalCalorie(u) => u.primary_code(),
            Self::Calorie(u) => u.primary_code(),
            Self::NutritionLabelCalories(u) => u.primary_code(),
            Self::BritishThermalUnitAt39DegF(u) => u.primary_code(),
            Self::BritishThermalUnitAt59DegF(u) => u.primary_code(),
            Self::BritishThermalUnitAt60DegF(u) => u.primary_code(),
            Self::MeanBritishThermalUnit(u) => u.primary_code(),
            Self::InternationalTableBritishThermalUnit(u) => u.primary_code(),
            Self::ThermochemicalBritishThermalUnit(u) => u.primary_code(),
            Self::BritishThermalUnit(u) => u.primary_code(),
            Self::Horsepower(u) => u.primary_code(),
            Self::Tex(u) => u.primary_code(),
            Self::Denier(u) => u.primary_code(),
            Self::MeterOfWaterColumn(u) => u.primary_code(),
            Self::MeterOfMercuryColumn(u) => u.primary_code(),
            Self::InchOfWaterColumn(u) => u.primary_code(),
            Self::InchOfMercuryColumn(u) => u.primary_code(),
            Self::PeripheralVascularResistanceUnit(u) => u.primary_code(),
            Self::WoodUnit(u) => u.primary_code(),
            Self::Diopter(u) => u.primary_code(),
            Self::Mesh(u) => u.primary_code(),
            Self::Charriere(u) => u.primary_code(),
            Self::Drop(u) => u.primary_code(),
            Self::HounsfieldUnit(u) => u.primary_code(),
            Self::MetabolicEquivalent(u) => u.primary_code(),
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries(u) => u.primary_code(),
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries(u) => u.primary_code(),
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries(u) => u.primary_code(),
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries(u) => u.primary_code(),
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries(u) => u.primary_code(),
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries(u) => u.primary_code(),
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries(u) => u.primary_code(),
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries(u) => u.primary_code(),
            Self::Equivalents(u) => u.primary_code(),
            Self::Osmole(u) => u.primary_code(),
            Self::GramPercent(u) => u.primary_code(),
            Self::SvedbergUnit(u) => u.primary_code(),
            Self::HighPowerField(u) => u.primary_code(),
            Self::LowPowerField(u) => u.primary_code(),
            Self::Katal(u) => u.primary_code(),
            Self::Unit(u) => u.primary_code(),
            Self::InternationalUnitIU(u) => u.primary_code(),
            Self::InternationalUnitIu(u) => u.primary_code(),
            Self::ArbitraryUnit(u) => u.primary_code(),
            Self::UnitedStatesPharmacopeiaUnit(u) => u.primary_code(),
            Self::GplUnit(u) => u.primary_code(),
            Self::MplUnit(u) => u.primary_code(),
            Self::AplUnit(u) => u.primary_code(),
            Self::BethesdaUnit(u) => u.primary_code(),
            Self::AntiFactorXaUnit(u) => u.primary_code(),
            Self::ToddUnit(u) => u.primary_code(),
            Self::DyeUnit(u) => u.primary_code(),
            Self::SomogyiUnit(u) => u.primary_code(),
            Self::BodanskyUnit(u) => u.primary_code(),
            Self::KingArmstrongUnit(u) => u.primary_code(),
            Self::KunkelUnit(u) => u.primary_code(),
            Self::MacLaganUnit(u) => u.primary_code(),
            Self::TuberculinUnit(u) => u.primary_code(),
            Self::FiftyPercentCellCultureInfectiousDose(u) => u.primary_code(),
            Self::FiftyPercentTissueCultureInfectiousDose(u) => u.primary_code(),
            Self::FiftyPercentEmbryoInfectiousDose(u) => u.primary_code(),
            Self::PlaqueFormingUnits(u) => u.primary_code(),
            Self::FocusFormingUnits(u) => u.primary_code(),
            Self::ColonyFormingUnits(u) => u.primary_code(),
            Self::IndexOfReactivity(u) => u.primary_code(),
            Self::BioequivalentAllergenUnit(u) => u.primary_code(),
            Self::AllergenUnit(u) => u.primary_code(),
            Self::AllergenUnitForAmbrosiaArtemisiifolia(u) => u.primary_code(),
            Self::ProteinNitrogenUnit(u) => u.primary_code(),
            Self::LimitOfFlocculation(u) => u.primary_code(),
            Self::DAntigenUnit(u) => u.primary_code(),
            Self::FibrinogenEquivalentUnit(u) => u.primary_code(),
            Self::ElisaUnit(u) => u.primary_code(),
            Self::EhrlichUnit(u) => u.primary_code(),
            Self::Stere(u) => u.primary_code(),
            Self::Angstrom(u) => u.primary_code(),
            Self::Barn(u) => u.primary_code(),
            Self::TechnicalAtmosphere(u) => u.primary_code(),
            Self::Mho(u) => u.primary_code(),
            Self::PoundPerSquareInch(u) => u.primary_code(),
            Self::Circle(u) => u.primary_code(),
            Self::Spere(u) => u.primary_code(),
            Self::MetricCarat(u) => u.primary_code(),
            Self::CaratOfGoldAlloys(u) => u.primary_code(),
            Self::Smoot(u) => u.primary_code(),
            Self::Bit(u) => u.primary_code(),
            Self::Byte(u) => u.primary_code(),
            Self::Baud(u) => u.primary_code(),
        }
    }
    #[allow(clippy::too_many_lines)]
    #[must_use]
    pub fn value(&self) -> Option<UnitValue<'static>> {
        match self {
            Self::Meter(u) => u.value(),
            Self::Second(u) => u.value(),
            Self::Gram(u) => u.value(),
            Self::Radian(u) => u.value(),
            Self::Kelvin(u) => u.value(),
            Self::Coulomb(u) => u.value(),
            Self::Candela(u) => u.value(),
            Self::TheNumberTenForArbitraryPowers10star(u) => u.value(),
            Self::TheNumberTenForArbitraryPowers10caret(u) => u.value(),
            Self::TheNumberPi(u) => u.value(),
            Self::Percent(u) => u.value(),
            Self::PartsPerThousand(u) => u.value(),
            Self::PartsPerMillion(u) => u.value(),
            Self::PartsPerBillion(u) => u.value(),
            Self::PartsPerTrillion(u) => u.value(),
            Self::Mole(u) => u.value(),
            Self::Steradian(u) => u.value(),
            Self::Hertz(u) => u.value(),
            Self::Newton(u) => u.value(),
            Self::Pascal(u) => u.value(),
            Self::Joule(u) => u.value(),
            Self::Watt(u) => u.value(),
            Self::Ampere(u) => u.value(),
            Self::Volt(u) => u.value(),
            Self::Farad(u) => u.value(),
            Self::Ohm(u) => u.value(),
            Self::Siemens(u) => u.value(),
            Self::Weber(u) => u.value(),
            Self::DegreeCelsius(u) => u.value(),
            Self::Tesla(u) => u.value(),
            Self::Henry(u) => u.value(),
            Self::Lumen(u) => u.value(),
            Self::Lux(u) => u.value(),
            Self::Becquerel(u) => u.value(),
            Self::Gray(u) => u.value(),
            Self::Sievert(u) => u.value(),
            Self::Gon(u) => u.value(),
            Self::Degree(u) => u.value(),
            Self::MinuteTick(u) => u.value(),
            Self::SecondAngle(u) => u.value(),
            Self::LiterL(u) => u.value(),
            Self::LiterUsL(u) => u.value(),
            Self::Are(u) => u.value(),
            Self::MinuteMin(u) => u.value(),
            Self::Hour(u) => u.value(),
            Self::Day(u) => u.value(),
            Self::TropicalYear(u) => u.value(),
            Self::MeanJulianYear(u) => u.value(),
            Self::MeanGregorianYear(u) => u.value(),
            Self::Year(u) => u.value(),
            Self::Week(u) => u.value(),
            Self::SynodalMonth(u) => u.value(),
            Self::MeanJulianMonth(u) => u.value(),
            Self::MeanGregorianMonth(u) => u.value(),
            Self::Month(u) => u.value(),
            Self::Tonne(u) => u.value(),
            Self::Bar(u) => u.value(),
            Self::UnifiedAtomicMassUnit(u) => u.value(),
            Self::Electronvolt(u) => u.value(),
            Self::AstronomicUnit(u) => u.value(),
            Self::Parsec(u) => u.value(),
            Self::VelocityOfLight(u) => u.value(),
            Self::PlanckConstant(u) => u.value(),
            Self::BoltzmannConstant(u) => u.value(),
            Self::PermittivityOfVacuum(u) => u.value(),
            Self::PermeabilityOfVacuum(u) => u.value(),
            Self::ElementaryCharge(u) => u.value(),
            Self::ElectronMass(u) => u.value(),
            Self::ProtonMass(u) => u.value(),
            Self::NewtonianConstantOfGravitation(u) => u.value(),
            Self::StandardAccelerationOfFreeFall(u) => u.value(),
            Self::StandardAtmosphere(u) => u.value(),
            Self::LightYear(u) => u.value(),
            Self::GramForce(u) => u.value(),
            Self::PoundForce(u) => u.value(),
            Self::Kayser(u) => u.value(),
            Self::Gal(u) => u.value(),
            Self::Dyne(u) => u.value(),
            Self::Erg(u) => u.value(),
            Self::Poise(u) => u.value(),
            Self::Biot(u) => u.value(),
            Self::Stokes(u) => u.value(),
            Self::Maxwell(u) => u.value(),
            Self::Gauss(u) => u.value(),
            Self::Oersted(u) => u.value(),
            Self::Gilbert(u) => u.value(),
            Self::Stilb(u) => u.value(),
            Self::Lambert(u) => u.value(),
            Self::Phot(u) => u.value(),
            Self::Curie(u) => u.value(),
            Self::Roentgen(u) => u.value(),
            Self::RadiationAbsorbedDose(u) => u.value(),
            Self::RadiationEquivalentMan(u) => u.value(),
            Self::InchInI(u) => u.value(),
            Self::FootFtI(u) => u.value(),
            Self::YardYdI(u) => u.value(),
            Self::MileMiI(u) => u.value(),
            Self::FathomFthI(u) => u.value(),
            Self::NauticalMileNmiI(u) => u.value(),
            Self::KnotKnI(u) => u.value(),
            Self::SquareInch(u) => u.value(),
            Self::SquareFoot(u) => u.value(),
            Self::SquareYard(u) => u.value(),
            Self::CubicInch(u) => u.value(),
            Self::CubicFoot(u) => u.value(),
            Self::CubicYard(u) => u.value(),
            Self::BoardFoot(u) => u.value(),
            Self::CordCrI(u) => u.value(),
            Self::MilMilI(u) => u.value(),
            Self::CircularMil(u) => u.value(),
            Self::Hand(u) => u.value(),
            Self::FootFtUs(u) => u.value(),
            Self::YardYdUs(u) => u.value(),
            Self::InchInUs(u) => u.value(),
            Self::RodRdUs(u) => u.value(),
            Self::GuntersChainChUs(u) => u.value(),
            Self::LinkForGuntersChainLkUs(u) => u.value(),
            Self::RamdensChain(u) => u.value(),
            Self::LinkForRamdensChain(u) => u.value(),
            Self::FathomFthUs(u) => u.value(),
            Self::Furlong(u) => u.value(),
            Self::MileMiUs(u) => u.value(),
            Self::AcreAcrUs(u) => u.value(),
            Self::SquareRod(u) => u.value(),
            Self::SquareMile(u) => u.value(),
            Self::Section(u) => u.value(),
            Self::Township(u) => u.value(),
            Self::MilMilUs(u) => u.value(),
            Self::InchInBr(u) => u.value(),
            Self::FootFtBr(u) => u.value(),
            Self::RodRdBr(u) => u.value(),
            Self::GuntersChainChBr(u) => u.value(),
            Self::LinkForGuntersChainLkBr(u) => u.value(),
            Self::FathomFthBr(u) => u.value(),
            Self::Pace(u) => u.value(),
            Self::YardYdBr(u) => u.value(),
            Self::MileMiBr(u) => u.value(),
            Self::NauticalMileNmiBr(u) => u.value(),
            Self::KnotKnBr(u) => u.value(),
            Self::AcreAcrBr(u) => u.value(),
            Self::QueenAnnesWineGallon(u) => u.value(),
            Self::Barrel(u) => u.value(),
            Self::QuartQtUs(u) => u.value(),
            Self::PintPtUs(u) => u.value(),
            Self::GillGilUs(u) => u.value(),
            Self::FluidOunceFozUs(u) => u.value(),
            Self::FluidDramFdrUs(u) => u.value(),
            Self::MinimMinUs(u) => u.value(),
            Self::CordCrdUs(u) => u.value(),
            Self::BushelBuUs(u) => u.value(),
            Self::HistoricalWinchesterGallon(u) => u.value(),
            Self::PeckPkUs(u) => u.value(),
            Self::DryQuart(u) => u.value(),
            Self::DryPint(u) => u.value(),
            Self::Tablespoon(u) => u.value(),
            Self::Teaspoon(u) => u.value(),
            Self::Cup(u) => u.value(),
            Self::MetricFluidOunce(u) => u.value(),
            Self::MetricCup(u) => u.value(),
            Self::MetricTeaspoon(u) => u.value(),
            Self::MetricTablespoon(u) => u.value(),
            Self::Gallon(u) => u.value(),
            Self::PeckPkBr(u) => u.value(),
            Self::BushelBuBr(u) => u.value(),
            Self::QuartQtBr(u) => u.value(),
            Self::PintPtBr(u) => u.value(),
            Self::GillGilBr(u) => u.value(),
            Self::FluidOunceFozBr(u) => u.value(),
            Self::FluidDramFdrBr(u) => u.value(),
            Self::MinimMinBr(u) => u.value(),
            Self::Grain(u) => u.value(),
            Self::PoundLbAv(u) => u.value(),
            Self::OunceOzAv(u) => u.value(),
            Self::DramDrAv(u) => u.value(),
            Self::ShortHundredweight(u) => u.value(),
            Self::LongHunderdweight(u) => u.value(),
            Self::ShortTon(u) => u.value(),
            Self::LongTon(u) => u.value(),
            Self::Stone(u) => u.value(),
            Self::Pennyweight(u) => u.value(),
            Self::OunceOzTr(u) => u.value(),
            Self::PoundLbTr(u) => u.value(),
            Self::Scruple(u) => u.value(),
            Self::DramDrAp(u) => u.value(),
            Self::OunceOzAp(u) => u.value(),
            Self::PoundLbAp(u) => u.value(),
            Self::MetricOunce(u) => u.value(),
            Self::Line(u) => u.value(),
            Self::Point(u) => u.value(),
            Self::Pica(u) => u.value(),
            Self::PrintersPoint(u) => u.value(),
            Self::PrintersPica(u) => u.value(),
            Self::Pied(u) => u.value(),
            Self::Pouce(u) => u.value(),
            Self::Ligne(u) => u.value(),
            Self::Didot(u) => u.value(),
            Self::Cicero(u) => u.value(),
            Self::DegreeRankine(u) => u.value(),
            Self::CalorieAt15DegC(u) => u.value(),
            Self::CalorieAt20DegC(u) => u.value(),
            Self::MeanCalorie(u) => u.value(),
            Self::InternationalTableCalorie(u) => u.value(),
            Self::ThermochemicalCalorie(u) => u.value(),
            Self::Calorie(u) => u.value(),
            Self::NutritionLabelCalories(u) => u.value(),
            Self::BritishThermalUnitAt39DegF(u) => u.value(),
            Self::BritishThermalUnitAt59DegF(u) => u.value(),
            Self::BritishThermalUnitAt60DegF(u) => u.value(),
            Self::MeanBritishThermalUnit(u) => u.value(),
            Self::InternationalTableBritishThermalUnit(u) => u.value(),
            Self::ThermochemicalBritishThermalUnit(u) => u.value(),
            Self::BritishThermalUnit(u) => u.value(),
            Self::Horsepower(u) => u.value(),
            Self::Tex(u) => u.value(),
            Self::Denier(u) => u.value(),
            Self::MeterOfWaterColumn(u) => u.value(),
            Self::MeterOfMercuryColumn(u) => u.value(),
            Self::InchOfWaterColumn(u) => u.value(),
            Self::InchOfMercuryColumn(u) => u.value(),
            Self::PeripheralVascularResistanceUnit(u) => u.value(),
            Self::WoodUnit(u) => u.value(),
            Self::Diopter(u) => u.value(),
            Self::Mesh(u) => u.value(),
            Self::Charriere(u) => u.value(),
            Self::Drop(u) => u.value(),
            Self::HounsfieldUnit(u) => u.value(),
            Self::MetabolicEquivalent(u) => u.value(),
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries(u) => u.value(),
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries(u) => u.value(),
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries(u) => u.value(),
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries(u) => u.value(),
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries(u) => u.value(),
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries(u) => u.value(),
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries(u) => u.value(),
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries(u) => u.value(),
            Self::Equivalents(u) => u.value(),
            Self::Osmole(u) => u.value(),
            Self::GramPercent(u) => u.value(),
            Self::SvedbergUnit(u) => u.value(),
            Self::HighPowerField(u) => u.value(),
            Self::LowPowerField(u) => u.value(),
            Self::Katal(u) => u.value(),
            Self::Unit(u) => u.value(),
            Self::InternationalUnitIU(u) => u.value(),
            Self::InternationalUnitIu(u) => u.value(),
            Self::ArbitraryUnit(u) => u.value(),
            Self::UnitedStatesPharmacopeiaUnit(u) => u.value(),
            Self::GplUnit(u) => u.value(),
            Self::MplUnit(u) => u.value(),
            Self::AplUnit(u) => u.value(),
            Self::BethesdaUnit(u) => u.value(),
            Self::AntiFactorXaUnit(u) => u.value(),
            Self::ToddUnit(u) => u.value(),
            Self::DyeUnit(u) => u.value(),
            Self::SomogyiUnit(u) => u.value(),
            Self::BodanskyUnit(u) => u.value(),
            Self::KingArmstrongUnit(u) => u.value(),
            Self::KunkelUnit(u) => u.value(),
            Self::MacLaganUnit(u) => u.value(),
            Self::TuberculinUnit(u) => u.value(),
            Self::FiftyPercentCellCultureInfectiousDose(u) => u.value(),
            Self::FiftyPercentTissueCultureInfectiousDose(u) => u.value(),
            Self::FiftyPercentEmbryoInfectiousDose(u) => u.value(),
            Self::PlaqueFormingUnits(u) => u.value(),
            Self::FocusFormingUnits(u) => u.value(),
            Self::ColonyFormingUnits(u) => u.value(),
            Self::IndexOfReactivity(u) => u.value(),
            Self::BioequivalentAllergenUnit(u) => u.value(),
            Self::AllergenUnit(u) => u.value(),
            Self::AllergenUnitForAmbrosiaArtemisiifolia(u) => u.value(),
            Self::ProteinNitrogenUnit(u) => u.value(),
            Self::LimitOfFlocculation(u) => u.value(),
            Self::DAntigenUnit(u) => u.value(),
            Self::FibrinogenEquivalentUnit(u) => u.value(),
            Self::ElisaUnit(u) => u.value(),
            Self::EhrlichUnit(u) => u.value(),
            Self::Stere(u) => u.value(),
            Self::Angstrom(u) => u.value(),
            Self::Barn(u) => u.value(),
            Self::TechnicalAtmosphere(u) => u.value(),
            Self::Mho(u) => u.value(),
            Self::PoundPerSquareInch(u) => u.value(),
            Self::Circle(u) => u.value(),
            Self::Spere(u) => u.value(),
            Self::MetricCarat(u) => u.value(),
            Self::CaratOfGoldAlloys(u) => u.value(),
            Self::Smoot(u) => u.value(),
            Self::Bit(u) => u.value(),
            Self::Byte(u) => u.value(),
            Self::Baud(u) => u.value(),
        }
    }
    #[must_use]
    #[allow(clippy::too_many_lines)]
    #[cfg(not(feature = "bootstrap"))]
    pub fn scalar(&self) -> Ratio<u128> {
        match self {
            Self::Meter(u) => u.scalar(),
            Self::Second(u) => u.scalar(),
            Self::Gram(u) => u.scalar(),
            Self::Radian(u) => u.scalar(),
            Self::Kelvin(u) => u.scalar(),
            Self::Coulomb(u) => u.scalar(),
            Self::Candela(u) => u.scalar(),
            Self::TheNumberTenForArbitraryPowers10star(u) => u.scalar(),
            Self::TheNumberTenForArbitraryPowers10caret(u) => u.scalar(),
            Self::TheNumberPi(u) => u.scalar(),
            Self::Percent(u) => u.scalar(),
            Self::PartsPerThousand(u) => u.scalar(),
            Self::PartsPerMillion(u) => u.scalar(),
            Self::PartsPerBillion(u) => u.scalar(),
            Self::PartsPerTrillion(u) => u.scalar(),
            Self::Mole(u) => u.scalar(),
            Self::Steradian(u) => u.scalar(),
            Self::Hertz(u) => u.scalar(),
            Self::Newton(u) => u.scalar(),
            Self::Pascal(u) => u.scalar(),
            Self::Joule(u) => u.scalar(),
            Self::Watt(u) => u.scalar(),
            Self::Ampere(u) => u.scalar(),
            Self::Volt(u) => u.scalar(),
            Self::Farad(u) => u.scalar(),
            Self::Ohm(u) => u.scalar(),
            Self::Siemens(u) => u.scalar(),
            Self::Weber(u) => u.scalar(),
            Self::DegreeCelsius(u) => u.scalar(),
            Self::Tesla(u) => u.scalar(),
            Self::Henry(u) => u.scalar(),
            Self::Lumen(u) => u.scalar(),
            Self::Lux(u) => u.scalar(),
            Self::Becquerel(u) => u.scalar(),
            Self::Gray(u) => u.scalar(),
            Self::Sievert(u) => u.scalar(),
            Self::Gon(u) => u.scalar(),
            Self::Degree(u) => u.scalar(),
            Self::MinuteTick(u) => u.scalar(),
            Self::SecondAngle(u) => u.scalar(),
            Self::LiterL(u) => u.scalar(),
            Self::LiterUsL(u) => u.scalar(),
            Self::Are(u) => u.scalar(),
            Self::MinuteMin(u) => u.scalar(),
            Self::Hour(u) => u.scalar(),
            Self::Day(u) => u.scalar(),
            Self::TropicalYear(u) => u.scalar(),
            Self::MeanJulianYear(u) => u.scalar(),
            Self::MeanGregorianYear(u) => u.scalar(),
            Self::Year(u) => u.scalar(),
            Self::Week(u) => u.scalar(),
            Self::SynodalMonth(u) => u.scalar(),
            Self::MeanJulianMonth(u) => u.scalar(),
            Self::MeanGregorianMonth(u) => u.scalar(),
            Self::Month(u) => u.scalar(),
            Self::Tonne(u) => u.scalar(),
            Self::Bar(u) => u.scalar(),
            Self::UnifiedAtomicMassUnit(u) => u.scalar(),
            Self::Electronvolt(u) => u.scalar(),
            Self::AstronomicUnit(u) => u.scalar(),
            Self::Parsec(u) => u.scalar(),
            Self::VelocityOfLight(u) => u.scalar(),
            Self::PlanckConstant(u) => u.scalar(),
            Self::BoltzmannConstant(u) => u.scalar(),
            Self::PermittivityOfVacuum(u) => u.scalar(),
            Self::PermeabilityOfVacuum(u) => u.scalar(),
            Self::ElementaryCharge(u) => u.scalar(),
            Self::ElectronMass(u) => u.scalar(),
            Self::ProtonMass(u) => u.scalar(),
            Self::NewtonianConstantOfGravitation(u) => u.scalar(),
            Self::StandardAccelerationOfFreeFall(u) => u.scalar(),
            Self::StandardAtmosphere(u) => u.scalar(),
            Self::LightYear(u) => u.scalar(),
            Self::GramForce(u) => u.scalar(),
            Self::PoundForce(u) => u.scalar(),
            Self::Kayser(u) => u.scalar(),
            Self::Gal(u) => u.scalar(),
            Self::Dyne(u) => u.scalar(),
            Self::Erg(u) => u.scalar(),
            Self::Poise(u) => u.scalar(),
            Self::Biot(u) => u.scalar(),
            Self::Stokes(u) => u.scalar(),
            Self::Maxwell(u) => u.scalar(),
            Self::Gauss(u) => u.scalar(),
            Self::Oersted(u) => u.scalar(),
            Self::Gilbert(u) => u.scalar(),
            Self::Stilb(u) => u.scalar(),
            Self::Lambert(u) => u.scalar(),
            Self::Phot(u) => u.scalar(),
            Self::Curie(u) => u.scalar(),
            Self::Roentgen(u) => u.scalar(),
            Self::RadiationAbsorbedDose(u) => u.scalar(),
            Self::RadiationEquivalentMan(u) => u.scalar(),
            Self::InchInI(u) => u.scalar(),
            Self::FootFtI(u) => u.scalar(),
            Self::YardYdI(u) => u.scalar(),
            Self::MileMiI(u) => u.scalar(),
            Self::FathomFthI(u) => u.scalar(),
            Self::NauticalMileNmiI(u) => u.scalar(),
            Self::KnotKnI(u) => u.scalar(),
            Self::SquareInch(u) => u.scalar(),
            Self::SquareFoot(u) => u.scalar(),
            Self::SquareYard(u) => u.scalar(),
            Self::CubicInch(u) => u.scalar(),
            Self::CubicFoot(u) => u.scalar(),
            Self::CubicYard(u) => u.scalar(),
            Self::BoardFoot(u) => u.scalar(),
            Self::CordCrI(u) => u.scalar(),
            Self::MilMilI(u) => u.scalar(),
            Self::CircularMil(u) => u.scalar(),
            Self::Hand(u) => u.scalar(),
            Self::FootFtUs(u) => u.scalar(),
            Self::YardYdUs(u) => u.scalar(),
            Self::InchInUs(u) => u.scalar(),
            Self::RodRdUs(u) => u.scalar(),
            Self::GuntersChainChUs(u) => u.scalar(),
            Self::LinkForGuntersChainLkUs(u) => u.scalar(),
            Self::RamdensChain(u) => u.scalar(),
            Self::LinkForRamdensChain(u) => u.scalar(),
            Self::FathomFthUs(u) => u.scalar(),
            Self::Furlong(u) => u.scalar(),
            Self::MileMiUs(u) => u.scalar(),
            Self::AcreAcrUs(u) => u.scalar(),
            Self::SquareRod(u) => u.scalar(),
            Self::SquareMile(u) => u.scalar(),
            Self::Section(u) => u.scalar(),
            Self::Township(u) => u.scalar(),
            Self::MilMilUs(u) => u.scalar(),
            Self::InchInBr(u) => u.scalar(),
            Self::FootFtBr(u) => u.scalar(),
            Self::RodRdBr(u) => u.scalar(),
            Self::GuntersChainChBr(u) => u.scalar(),
            Self::LinkForGuntersChainLkBr(u) => u.scalar(),
            Self::FathomFthBr(u) => u.scalar(),
            Self::Pace(u) => u.scalar(),
            Self::YardYdBr(u) => u.scalar(),
            Self::MileMiBr(u) => u.scalar(),
            Self::NauticalMileNmiBr(u) => u.scalar(),
            Self::KnotKnBr(u) => u.scalar(),
            Self::AcreAcrBr(u) => u.scalar(),
            Self::QueenAnnesWineGallon(u) => u.scalar(),
            Self::Barrel(u) => u.scalar(),
            Self::QuartQtUs(u) => u.scalar(),
            Self::PintPtUs(u) => u.scalar(),
            Self::GillGilUs(u) => u.scalar(),
            Self::FluidOunceFozUs(u) => u.scalar(),
            Self::FluidDramFdrUs(u) => u.scalar(),
            Self::MinimMinUs(u) => u.scalar(),
            Self::CordCrdUs(u) => u.scalar(),
            Self::BushelBuUs(u) => u.scalar(),
            Self::HistoricalWinchesterGallon(u) => u.scalar(),
            Self::PeckPkUs(u) => u.scalar(),
            Self::DryQuart(u) => u.scalar(),
            Self::DryPint(u) => u.scalar(),
            Self::Tablespoon(u) => u.scalar(),
            Self::Teaspoon(u) => u.scalar(),
            Self::Cup(u) => u.scalar(),
            Self::MetricFluidOunce(u) => u.scalar(),
            Self::MetricCup(u) => u.scalar(),
            Self::MetricTeaspoon(u) => u.scalar(),
            Self::MetricTablespoon(u) => u.scalar(),
            Self::Gallon(u) => u.scalar(),
            Self::PeckPkBr(u) => u.scalar(),
            Self::BushelBuBr(u) => u.scalar(),
            Self::QuartQtBr(u) => u.scalar(),
            Self::PintPtBr(u) => u.scalar(),
            Self::GillGilBr(u) => u.scalar(),
            Self::FluidOunceFozBr(u) => u.scalar(),
            Self::FluidDramFdrBr(u) => u.scalar(),
            Self::MinimMinBr(u) => u.scalar(),
            Self::Grain(u) => u.scalar(),
            Self::PoundLbAv(u) => u.scalar(),
            Self::OunceOzAv(u) => u.scalar(),
            Self::DramDrAv(u) => u.scalar(),
            Self::ShortHundredweight(u) => u.scalar(),
            Self::LongHunderdweight(u) => u.scalar(),
            Self::ShortTon(u) => u.scalar(),
            Self::LongTon(u) => u.scalar(),
            Self::Stone(u) => u.scalar(),
            Self::Pennyweight(u) => u.scalar(),
            Self::OunceOzTr(u) => u.scalar(),
            Self::PoundLbTr(u) => u.scalar(),
            Self::Scruple(u) => u.scalar(),
            Self::DramDrAp(u) => u.scalar(),
            Self::OunceOzAp(u) => u.scalar(),
            Self::PoundLbAp(u) => u.scalar(),
            Self::MetricOunce(u) => u.scalar(),
            Self::Line(u) => u.scalar(),
            Self::Point(u) => u.scalar(),
            Self::Pica(u) => u.scalar(),
            Self::PrintersPoint(u) => u.scalar(),
            Self::PrintersPica(u) => u.scalar(),
            Self::Pied(u) => u.scalar(),
            Self::Pouce(u) => u.scalar(),
            Self::Ligne(u) => u.scalar(),
            Self::Didot(u) => u.scalar(),
            Self::Cicero(u) => u.scalar(),
            Self::DegreeRankine(u) => u.scalar(),
            Self::CalorieAt15DegC(u) => u.scalar(),
            Self::CalorieAt20DegC(u) => u.scalar(),
            Self::MeanCalorie(u) => u.scalar(),
            Self::InternationalTableCalorie(u) => u.scalar(),
            Self::ThermochemicalCalorie(u) => u.scalar(),
            Self::Calorie(u) => u.scalar(),
            Self::NutritionLabelCalories(u) => u.scalar(),
            Self::BritishThermalUnitAt39DegF(u) => u.scalar(),
            Self::BritishThermalUnitAt59DegF(u) => u.scalar(),
            Self::BritishThermalUnitAt60DegF(u) => u.scalar(),
            Self::MeanBritishThermalUnit(u) => u.scalar(),
            Self::InternationalTableBritishThermalUnit(u) => u.scalar(),
            Self::ThermochemicalBritishThermalUnit(u) => u.scalar(),
            Self::BritishThermalUnit(u) => u.scalar(),
            Self::Horsepower(u) => u.scalar(),
            Self::Tex(u) => u.scalar(),
            Self::Denier(u) => u.scalar(),
            Self::MeterOfWaterColumn(u) => u.scalar(),
            Self::MeterOfMercuryColumn(u) => u.scalar(),
            Self::InchOfWaterColumn(u) => u.scalar(),
            Self::InchOfMercuryColumn(u) => u.scalar(),
            Self::PeripheralVascularResistanceUnit(u) => u.scalar(),
            Self::WoodUnit(u) => u.scalar(),
            Self::Diopter(u) => u.scalar(),
            Self::Mesh(u) => u.scalar(),
            Self::Charriere(u) => u.scalar(),
            Self::Drop(u) => u.scalar(),
            Self::HounsfieldUnit(u) => u.scalar(),
            Self::MetabolicEquivalent(u) => u.scalar(),
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries(u) => u.scalar(),
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries(u) => u.scalar(),
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries(u) => u.scalar(),
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries(u) => u.scalar(),
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries(u) => u.scalar(),
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries(u) => u.scalar(),
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries(u) => u.scalar(),
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries(u) => u.scalar(),
            Self::Equivalents(u) => u.scalar(),
            Self::Osmole(u) => u.scalar(),
            Self::GramPercent(u) => u.scalar(),
            Self::SvedbergUnit(u) => u.scalar(),
            Self::HighPowerField(u) => u.scalar(),
            Self::LowPowerField(u) => u.scalar(),
            Self::Katal(u) => u.scalar(),
            Self::Unit(u) => u.scalar(),
            Self::InternationalUnitIU(u) => u.scalar(),
            Self::InternationalUnitIu(u) => u.scalar(),
            Self::ArbitraryUnit(u) => u.scalar(),
            Self::UnitedStatesPharmacopeiaUnit(u) => u.scalar(),
            Self::GplUnit(u) => u.scalar(),
            Self::MplUnit(u) => u.scalar(),
            Self::AplUnit(u) => u.scalar(),
            Self::BethesdaUnit(u) => u.scalar(),
            Self::AntiFactorXaUnit(u) => u.scalar(),
            Self::ToddUnit(u) => u.scalar(),
            Self::DyeUnit(u) => u.scalar(),
            Self::SomogyiUnit(u) => u.scalar(),
            Self::BodanskyUnit(u) => u.scalar(),
            Self::KingArmstrongUnit(u) => u.scalar(),
            Self::KunkelUnit(u) => u.scalar(),
            Self::MacLaganUnit(u) => u.scalar(),
            Self::TuberculinUnit(u) => u.scalar(),
            Self::FiftyPercentCellCultureInfectiousDose(u) => u.scalar(),
            Self::FiftyPercentTissueCultureInfectiousDose(u) => u.scalar(),
            Self::FiftyPercentEmbryoInfectiousDose(u) => u.scalar(),
            Self::PlaqueFormingUnits(u) => u.scalar(),
            Self::FocusFormingUnits(u) => u.scalar(),
            Self::ColonyFormingUnits(u) => u.scalar(),
            Self::IndexOfReactivity(u) => u.scalar(),
            Self::BioequivalentAllergenUnit(u) => u.scalar(),
            Self::AllergenUnit(u) => u.scalar(),
            Self::AllergenUnitForAmbrosiaArtemisiifolia(u) => u.scalar(),
            Self::ProteinNitrogenUnit(u) => u.scalar(),
            Self::LimitOfFlocculation(u) => u.scalar(),
            Self::DAntigenUnit(u) => u.scalar(),
            Self::FibrinogenEquivalentUnit(u) => u.scalar(),
            Self::ElisaUnit(u) => u.scalar(),
            Self::EhrlichUnit(u) => u.scalar(),
            Self::Stere(u) => u.scalar(),
            Self::Angstrom(u) => u.scalar(),
            Self::Barn(u) => u.scalar(),
            Self::TechnicalAtmosphere(u) => u.scalar(),
            Self::Mho(u) => u.scalar(),
            Self::PoundPerSquareInch(u) => u.scalar(),
            Self::Circle(u) => u.scalar(),
            Self::Spere(u) => u.scalar(),
            Self::MetricCarat(u) => u.scalar(),
            Self::CaratOfGoldAlloys(u) => u.scalar(),
            Self::Smoot(u) => u.scalar(),
            Self::Bit(u) => u.scalar(),
            Self::Byte(u) => u.scalar(),
            Self::Baud(u) => u.scalar(),
        }
    }
    #[allow(clippy::too_many_lines)]
    #[must_use]
    pub fn dimension(&self) -> Dimension {
        match self {
            Self::Meter(u) => u.dimension(),
            Self::Second(u) => u.dimension(),
            Self::Gram(u) => u.dimension(),
            Self::Radian(u) => u.dimension(),
            Self::Kelvin(u) => u.dimension(),
            Self::Coulomb(u) => u.dimension(),
            Self::Candela(u) => u.dimension(),
            Self::TheNumberTenForArbitraryPowers10star(u) => u.dimension(),
            Self::TheNumberTenForArbitraryPowers10caret(u) => u.dimension(),
            Self::TheNumberPi(u) => u.dimension(),
            Self::Percent(u) => u.dimension(),
            Self::PartsPerThousand(u) => u.dimension(),
            Self::PartsPerMillion(u) => u.dimension(),
            Self::PartsPerBillion(u) => u.dimension(),
            Self::PartsPerTrillion(u) => u.dimension(),
            Self::Mole(u) => u.dimension(),
            Self::Steradian(u) => u.dimension(),
            Self::Hertz(u) => u.dimension(),
            Self::Newton(u) => u.dimension(),
            Self::Pascal(u) => u.dimension(),
            Self::Joule(u) => u.dimension(),
            Self::Watt(u) => u.dimension(),
            Self::Ampere(u) => u.dimension(),
            Self::Volt(u) => u.dimension(),
            Self::Farad(u) => u.dimension(),
            Self::Ohm(u) => u.dimension(),
            Self::Siemens(u) => u.dimension(),
            Self::Weber(u) => u.dimension(),
            Self::DegreeCelsius(u) => u.dimension(),
            Self::Tesla(u) => u.dimension(),
            Self::Henry(u) => u.dimension(),
            Self::Lumen(u) => u.dimension(),
            Self::Lux(u) => u.dimension(),
            Self::Becquerel(u) => u.dimension(),
            Self::Gray(u) => u.dimension(),
            Self::Sievert(u) => u.dimension(),
            Self::Gon(u) => u.dimension(),
            Self::Degree(u) => u.dimension(),
            Self::MinuteTick(u) => u.dimension(),
            Self::SecondAngle(u) => u.dimension(),
            Self::LiterL(u) => u.dimension(),
            Self::LiterUsL(u) => u.dimension(),
            Self::Are(u) => u.dimension(),
            Self::MinuteMin(u) => u.dimension(),
            Self::Hour(u) => u.dimension(),
            Self::Day(u) => u.dimension(),
            Self::TropicalYear(u) => u.dimension(),
            Self::MeanJulianYear(u) => u.dimension(),
            Self::MeanGregorianYear(u) => u.dimension(),
            Self::Year(u) => u.dimension(),
            Self::Week(u) => u.dimension(),
            Self::SynodalMonth(u) => u.dimension(),
            Self::MeanJulianMonth(u) => u.dimension(),
            Self::MeanGregorianMonth(u) => u.dimension(),
            Self::Month(u) => u.dimension(),
            Self::Tonne(u) => u.dimension(),
            Self::Bar(u) => u.dimension(),
            Self::UnifiedAtomicMassUnit(u) => u.dimension(),
            Self::Electronvolt(u) => u.dimension(),
            Self::AstronomicUnit(u) => u.dimension(),
            Self::Parsec(u) => u.dimension(),
            Self::VelocityOfLight(u) => u.dimension(),
            Self::PlanckConstant(u) => u.dimension(),
            Self::BoltzmannConstant(u) => u.dimension(),
            Self::PermittivityOfVacuum(u) => u.dimension(),
            Self::PermeabilityOfVacuum(u) => u.dimension(),
            Self::ElementaryCharge(u) => u.dimension(),
            Self::ElectronMass(u) => u.dimension(),
            Self::ProtonMass(u) => u.dimension(),
            Self::NewtonianConstantOfGravitation(u) => u.dimension(),
            Self::StandardAccelerationOfFreeFall(u) => u.dimension(),
            Self::StandardAtmosphere(u) => u.dimension(),
            Self::LightYear(u) => u.dimension(),
            Self::GramForce(u) => u.dimension(),
            Self::PoundForce(u) => u.dimension(),
            Self::Kayser(u) => u.dimension(),
            Self::Gal(u) => u.dimension(),
            Self::Dyne(u) => u.dimension(),
            Self::Erg(u) => u.dimension(),
            Self::Poise(u) => u.dimension(),
            Self::Biot(u) => u.dimension(),
            Self::Stokes(u) => u.dimension(),
            Self::Maxwell(u) => u.dimension(),
            Self::Gauss(u) => u.dimension(),
            Self::Oersted(u) => u.dimension(),
            Self::Gilbert(u) => u.dimension(),
            Self::Stilb(u) => u.dimension(),
            Self::Lambert(u) => u.dimension(),
            Self::Phot(u) => u.dimension(),
            Self::Curie(u) => u.dimension(),
            Self::Roentgen(u) => u.dimension(),
            Self::RadiationAbsorbedDose(u) => u.dimension(),
            Self::RadiationEquivalentMan(u) => u.dimension(),
            Self::InchInI(u) => u.dimension(),
            Self::FootFtI(u) => u.dimension(),
            Self::YardYdI(u) => u.dimension(),
            Self::MileMiI(u) => u.dimension(),
            Self::FathomFthI(u) => u.dimension(),
            Self::NauticalMileNmiI(u) => u.dimension(),
            Self::KnotKnI(u) => u.dimension(),
            Self::SquareInch(u) => u.dimension(),
            Self::SquareFoot(u) => u.dimension(),
            Self::SquareYard(u) => u.dimension(),
            Self::CubicInch(u) => u.dimension(),
            Self::CubicFoot(u) => u.dimension(),
            Self::CubicYard(u) => u.dimension(),
            Self::BoardFoot(u) => u.dimension(),
            Self::CordCrI(u) => u.dimension(),
            Self::MilMilI(u) => u.dimension(),
            Self::CircularMil(u) => u.dimension(),
            Self::Hand(u) => u.dimension(),
            Self::FootFtUs(u) => u.dimension(),
            Self::YardYdUs(u) => u.dimension(),
            Self::InchInUs(u) => u.dimension(),
            Self::RodRdUs(u) => u.dimension(),
            Self::GuntersChainChUs(u) => u.dimension(),
            Self::LinkForGuntersChainLkUs(u) => u.dimension(),
            Self::RamdensChain(u) => u.dimension(),
            Self::LinkForRamdensChain(u) => u.dimension(),
            Self::FathomFthUs(u) => u.dimension(),
            Self::Furlong(u) => u.dimension(),
            Self::MileMiUs(u) => u.dimension(),
            Self::AcreAcrUs(u) => u.dimension(),
            Self::SquareRod(u) => u.dimension(),
            Self::SquareMile(u) => u.dimension(),
            Self::Section(u) => u.dimension(),
            Self::Township(u) => u.dimension(),
            Self::MilMilUs(u) => u.dimension(),
            Self::InchInBr(u) => u.dimension(),
            Self::FootFtBr(u) => u.dimension(),
            Self::RodRdBr(u) => u.dimension(),
            Self::GuntersChainChBr(u) => u.dimension(),
            Self::LinkForGuntersChainLkBr(u) => u.dimension(),
            Self::FathomFthBr(u) => u.dimension(),
            Self::Pace(u) => u.dimension(),
            Self::YardYdBr(u) => u.dimension(),
            Self::MileMiBr(u) => u.dimension(),
            Self::NauticalMileNmiBr(u) => u.dimension(),
            Self::KnotKnBr(u) => u.dimension(),
            Self::AcreAcrBr(u) => u.dimension(),
            Self::QueenAnnesWineGallon(u) => u.dimension(),
            Self::Barrel(u) => u.dimension(),
            Self::QuartQtUs(u) => u.dimension(),
            Self::PintPtUs(u) => u.dimension(),
            Self::GillGilUs(u) => u.dimension(),
            Self::FluidOunceFozUs(u) => u.dimension(),
            Self::FluidDramFdrUs(u) => u.dimension(),
            Self::MinimMinUs(u) => u.dimension(),
            Self::CordCrdUs(u) => u.dimension(),
            Self::BushelBuUs(u) => u.dimension(),
            Self::HistoricalWinchesterGallon(u) => u.dimension(),
            Self::PeckPkUs(u) => u.dimension(),
            Self::DryQuart(u) => u.dimension(),
            Self::DryPint(u) => u.dimension(),
            Self::Tablespoon(u) => u.dimension(),
            Self::Teaspoon(u) => u.dimension(),
            Self::Cup(u) => u.dimension(),
            Self::MetricFluidOunce(u) => u.dimension(),
            Self::MetricCup(u) => u.dimension(),
            Self::MetricTeaspoon(u) => u.dimension(),
            Self::MetricTablespoon(u) => u.dimension(),
            Self::Gallon(u) => u.dimension(),
            Self::PeckPkBr(u) => u.dimension(),
            Self::BushelBuBr(u) => u.dimension(),
            Self::QuartQtBr(u) => u.dimension(),
            Self::PintPtBr(u) => u.dimension(),
            Self::GillGilBr(u) => u.dimension(),
            Self::FluidOunceFozBr(u) => u.dimension(),
            Self::FluidDramFdrBr(u) => u.dimension(),
            Self::MinimMinBr(u) => u.dimension(),
            Self::Grain(u) => u.dimension(),
            Self::PoundLbAv(u) => u.dimension(),
            Self::OunceOzAv(u) => u.dimension(),
            Self::DramDrAv(u) => u.dimension(),
            Self::ShortHundredweight(u) => u.dimension(),
            Self::LongHunderdweight(u) => u.dimension(),
            Self::ShortTon(u) => u.dimension(),
            Self::LongTon(u) => u.dimension(),
            Self::Stone(u) => u.dimension(),
            Self::Pennyweight(u) => u.dimension(),
            Self::OunceOzTr(u) => u.dimension(),
            Self::PoundLbTr(u) => u.dimension(),
            Self::Scruple(u) => u.dimension(),
            Self::DramDrAp(u) => u.dimension(),
            Self::OunceOzAp(u) => u.dimension(),
            Self::PoundLbAp(u) => u.dimension(),
            Self::MetricOunce(u) => u.dimension(),
            Self::Line(u) => u.dimension(),
            Self::Point(u) => u.dimension(),
            Self::Pica(u) => u.dimension(),
            Self::PrintersPoint(u) => u.dimension(),
            Self::PrintersPica(u) => u.dimension(),
            Self::Pied(u) => u.dimension(),
            Self::Pouce(u) => u.dimension(),
            Self::Ligne(u) => u.dimension(),
            Self::Didot(u) => u.dimension(),
            Self::Cicero(u) => u.dimension(),
            Self::DegreeRankine(u) => u.dimension(),
            Self::CalorieAt15DegC(u) => u.dimension(),
            Self::CalorieAt20DegC(u) => u.dimension(),
            Self::MeanCalorie(u) => u.dimension(),
            Self::InternationalTableCalorie(u) => u.dimension(),
            Self::ThermochemicalCalorie(u) => u.dimension(),
            Self::Calorie(u) => u.dimension(),
            Self::NutritionLabelCalories(u) => u.dimension(),
            Self::BritishThermalUnitAt39DegF(u) => u.dimension(),
            Self::BritishThermalUnitAt59DegF(u) => u.dimension(),
            Self::BritishThermalUnitAt60DegF(u) => u.dimension(),
            Self::MeanBritishThermalUnit(u) => u.dimension(),
            Self::InternationalTableBritishThermalUnit(u) => u.dimension(),
            Self::ThermochemicalBritishThermalUnit(u) => u.dimension(),
            Self::BritishThermalUnit(u) => u.dimension(),
            Self::Horsepower(u) => u.dimension(),
            Self::Tex(u) => u.dimension(),
            Self::Denier(u) => u.dimension(),
            Self::MeterOfWaterColumn(u) => u.dimension(),
            Self::MeterOfMercuryColumn(u) => u.dimension(),
            Self::InchOfWaterColumn(u) => u.dimension(),
            Self::InchOfMercuryColumn(u) => u.dimension(),
            Self::PeripheralVascularResistanceUnit(u) => u.dimension(),
            Self::WoodUnit(u) => u.dimension(),
            Self::Diopter(u) => u.dimension(),
            Self::Mesh(u) => u.dimension(),
            Self::Charriere(u) => u.dimension(),
            Self::Drop(u) => u.dimension(),
            Self::HounsfieldUnit(u) => u.dimension(),
            Self::MetabolicEquivalent(u) => u.dimension(),
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries(u) => u.dimension(),
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries(u) => u.dimension(),
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries(u) => u.dimension(),
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries(u) => u.dimension(),
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries(u) => u.dimension(),
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries(u) => u.dimension(),
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries(u) => u.dimension(),
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries(u) => u.dimension(),
            Self::Equivalents(u) => u.dimension(),
            Self::Osmole(u) => u.dimension(),
            Self::GramPercent(u) => u.dimension(),
            Self::SvedbergUnit(u) => u.dimension(),
            Self::HighPowerField(u) => u.dimension(),
            Self::LowPowerField(u) => u.dimension(),
            Self::Katal(u) => u.dimension(),
            Self::Unit(u) => u.dimension(),
            Self::InternationalUnitIU(u) => u.dimension(),
            Self::InternationalUnitIu(u) => u.dimension(),
            Self::ArbitraryUnit(u) => u.dimension(),
            Self::UnitedStatesPharmacopeiaUnit(u) => u.dimension(),
            Self::GplUnit(u) => u.dimension(),
            Self::MplUnit(u) => u.dimension(),
            Self::AplUnit(u) => u.dimension(),
            Self::BethesdaUnit(u) => u.dimension(),
            Self::AntiFactorXaUnit(u) => u.dimension(),
            Self::ToddUnit(u) => u.dimension(),
            Self::DyeUnit(u) => u.dimension(),
            Self::SomogyiUnit(u) => u.dimension(),
            Self::BodanskyUnit(u) => u.dimension(),
            Self::KingArmstrongUnit(u) => u.dimension(),
            Self::KunkelUnit(u) => u.dimension(),
            Self::MacLaganUnit(u) => u.dimension(),
            Self::TuberculinUnit(u) => u.dimension(),
            Self::FiftyPercentCellCultureInfectiousDose(u) => u.dimension(),
            Self::FiftyPercentTissueCultureInfectiousDose(u) => u.dimension(),
            Self::FiftyPercentEmbryoInfectiousDose(u) => u.dimension(),
            Self::PlaqueFormingUnits(u) => u.dimension(),
            Self::FocusFormingUnits(u) => u.dimension(),
            Self::ColonyFormingUnits(u) => u.dimension(),
            Self::IndexOfReactivity(u) => u.dimension(),
            Self::BioequivalentAllergenUnit(u) => u.dimension(),
            Self::AllergenUnit(u) => u.dimension(),
            Self::AllergenUnitForAmbrosiaArtemisiifolia(u) => u.dimension(),
            Self::ProteinNitrogenUnit(u) => u.dimension(),
            Self::LimitOfFlocculation(u) => u.dimension(),
            Self::DAntigenUnit(u) => u.dimension(),
            Self::FibrinogenEquivalentUnit(u) => u.dimension(),
            Self::ElisaUnit(u) => u.dimension(),
            Self::EhrlichUnit(u) => u.dimension(),
            Self::Stere(u) => u.dimension(),
            Self::Angstrom(u) => u.dimension(),
            Self::Barn(u) => u.dimension(),
            Self::TechnicalAtmosphere(u) => u.dimension(),
            Self::Mho(u) => u.dimension(),
            Self::PoundPerSquareInch(u) => u.dimension(),
            Self::Circle(u) => u.dimension(),
            Self::Spere(u) => u.dimension(),
            Self::MetricCarat(u) => u.dimension(),
            Self::CaratOfGoldAlloys(u) => u.dimension(),
            Self::Smoot(u) => u.dimension(),
            Self::Bit(u) => u.dimension(),
            Self::Byte(u) => u.dimension(),
            Self::Baud(u) => u.dimension(),
        }
    }
    #[must_use]
    #[allow(clippy::too_many_lines)]
    #[cfg(not(feature = "bootstrap"))]
    pub fn is_special(&self) -> bool {
        match self {
            Self::Meter(u) => u.is_special(),
            Self::Second(u) => u.is_special(),
            Self::Gram(u) => u.is_special(),
            Self::Radian(u) => u.is_special(),
            Self::Kelvin(u) => u.is_special(),
            Self::Coulomb(u) => u.is_special(),
            Self::Candela(u) => u.is_special(),
            Self::TheNumberTenForArbitraryPowers10star(u) => u.is_special(),
            Self::TheNumberTenForArbitraryPowers10caret(u) => u.is_special(),
            Self::TheNumberPi(u) => u.is_special(),
            Self::Percent(u) => u.is_special(),
            Self::PartsPerThousand(u) => u.is_special(),
            Self::PartsPerMillion(u) => u.is_special(),
            Self::PartsPerBillion(u) => u.is_special(),
            Self::PartsPerTrillion(u) => u.is_special(),
            Self::Mole(u) => u.is_special(),
            Self::Steradian(u) => u.is_special(),
            Self::Hertz(u) => u.is_special(),
            Self::Newton(u) => u.is_special(),
            Self::Pascal(u) => u.is_special(),
            Self::Joule(u) => u.is_special(),
            Self::Watt(u) => u.is_special(),
            Self::Ampere(u) => u.is_special(),
            Self::Volt(u) => u.is_special(),
            Self::Farad(u) => u.is_special(),
            Self::Ohm(u) => u.is_special(),
            Self::Siemens(u) => u.is_special(),
            Self::Weber(u) => u.is_special(),
            Self::DegreeCelsius(u) => u.is_special(),
            Self::Tesla(u) => u.is_special(),
            Self::Henry(u) => u.is_special(),
            Self::Lumen(u) => u.is_special(),
            Self::Lux(u) => u.is_special(),
            Self::Becquerel(u) => u.is_special(),
            Self::Gray(u) => u.is_special(),
            Self::Sievert(u) => u.is_special(),
            Self::Gon(u) => u.is_special(),
            Self::Degree(u) => u.is_special(),
            Self::MinuteTick(u) => u.is_special(),
            Self::SecondAngle(u) => u.is_special(),
            Self::LiterL(u) => u.is_special(),
            Self::LiterUsL(u) => u.is_special(),
            Self::Are(u) => u.is_special(),
            Self::MinuteMin(u) => u.is_special(),
            Self::Hour(u) => u.is_special(),
            Self::Day(u) => u.is_special(),
            Self::TropicalYear(u) => u.is_special(),
            Self::MeanJulianYear(u) => u.is_special(),
            Self::MeanGregorianYear(u) => u.is_special(),
            Self::Year(u) => u.is_special(),
            Self::Week(u) => u.is_special(),
            Self::SynodalMonth(u) => u.is_special(),
            Self::MeanJulianMonth(u) => u.is_special(),
            Self::MeanGregorianMonth(u) => u.is_special(),
            Self::Month(u) => u.is_special(),
            Self::Tonne(u) => u.is_special(),
            Self::Bar(u) => u.is_special(),
            Self::UnifiedAtomicMassUnit(u) => u.is_special(),
            Self::Electronvolt(u) => u.is_special(),
            Self::AstronomicUnit(u) => u.is_special(),
            Self::Parsec(u) => u.is_special(),
            Self::VelocityOfLight(u) => u.is_special(),
            Self::PlanckConstant(u) => u.is_special(),
            Self::BoltzmannConstant(u) => u.is_special(),
            Self::PermittivityOfVacuum(u) => u.is_special(),
            Self::PermeabilityOfVacuum(u) => u.is_special(),
            Self::ElementaryCharge(u) => u.is_special(),
            Self::ElectronMass(u) => u.is_special(),
            Self::ProtonMass(u) => u.is_special(),
            Self::NewtonianConstantOfGravitation(u) => u.is_special(),
            Self::StandardAccelerationOfFreeFall(u) => u.is_special(),
            Self::StandardAtmosphere(u) => u.is_special(),
            Self::LightYear(u) => u.is_special(),
            Self::GramForce(u) => u.is_special(),
            Self::PoundForce(u) => u.is_special(),
            Self::Kayser(u) => u.is_special(),
            Self::Gal(u) => u.is_special(),
            Self::Dyne(u) => u.is_special(),
            Self::Erg(u) => u.is_special(),
            Self::Poise(u) => u.is_special(),
            Self::Biot(u) => u.is_special(),
            Self::Stokes(u) => u.is_special(),
            Self::Maxwell(u) => u.is_special(),
            Self::Gauss(u) => u.is_special(),
            Self::Oersted(u) => u.is_special(),
            Self::Gilbert(u) => u.is_special(),
            Self::Stilb(u) => u.is_special(),
            Self::Lambert(u) => u.is_special(),
            Self::Phot(u) => u.is_special(),
            Self::Curie(u) => u.is_special(),
            Self::Roentgen(u) => u.is_special(),
            Self::RadiationAbsorbedDose(u) => u.is_special(),
            Self::RadiationEquivalentMan(u) => u.is_special(),
            Self::InchInI(u) => u.is_special(),
            Self::FootFtI(u) => u.is_special(),
            Self::YardYdI(u) => u.is_special(),
            Self::MileMiI(u) => u.is_special(),
            Self::FathomFthI(u) => u.is_special(),
            Self::NauticalMileNmiI(u) => u.is_special(),
            Self::KnotKnI(u) => u.is_special(),
            Self::SquareInch(u) => u.is_special(),
            Self::SquareFoot(u) => u.is_special(),
            Self::SquareYard(u) => u.is_special(),
            Self::CubicInch(u) => u.is_special(),
            Self::CubicFoot(u) => u.is_special(),
            Self::CubicYard(u) => u.is_special(),
            Self::BoardFoot(u) => u.is_special(),
            Self::CordCrI(u) => u.is_special(),
            Self::MilMilI(u) => u.is_special(),
            Self::CircularMil(u) => u.is_special(),
            Self::Hand(u) => u.is_special(),
            Self::FootFtUs(u) => u.is_special(),
            Self::YardYdUs(u) => u.is_special(),
            Self::InchInUs(u) => u.is_special(),
            Self::RodRdUs(u) => u.is_special(),
            Self::GuntersChainChUs(u) => u.is_special(),
            Self::LinkForGuntersChainLkUs(u) => u.is_special(),
            Self::RamdensChain(u) => u.is_special(),
            Self::LinkForRamdensChain(u) => u.is_special(),
            Self::FathomFthUs(u) => u.is_special(),
            Self::Furlong(u) => u.is_special(),
            Self::MileMiUs(u) => u.is_special(),
            Self::AcreAcrUs(u) => u.is_special(),
            Self::SquareRod(u) => u.is_special(),
            Self::SquareMile(u) => u.is_special(),
            Self::Section(u) => u.is_special(),
            Self::Township(u) => u.is_special(),
            Self::MilMilUs(u) => u.is_special(),
            Self::InchInBr(u) => u.is_special(),
            Self::FootFtBr(u) => u.is_special(),
            Self::RodRdBr(u) => u.is_special(),
            Self::GuntersChainChBr(u) => u.is_special(),
            Self::LinkForGuntersChainLkBr(u) => u.is_special(),
            Self::FathomFthBr(u) => u.is_special(),
            Self::Pace(u) => u.is_special(),
            Self::YardYdBr(u) => u.is_special(),
            Self::MileMiBr(u) => u.is_special(),
            Self::NauticalMileNmiBr(u) => u.is_special(),
            Self::KnotKnBr(u) => u.is_special(),
            Self::AcreAcrBr(u) => u.is_special(),
            Self::QueenAnnesWineGallon(u) => u.is_special(),
            Self::Barrel(u) => u.is_special(),
            Self::QuartQtUs(u) => u.is_special(),
            Self::PintPtUs(u) => u.is_special(),
            Self::GillGilUs(u) => u.is_special(),
            Self::FluidOunceFozUs(u) => u.is_special(),
            Self::FluidDramFdrUs(u) => u.is_special(),
            Self::MinimMinUs(u) => u.is_special(),
            Self::CordCrdUs(u) => u.is_special(),
            Self::BushelBuUs(u) => u.is_special(),
            Self::HistoricalWinchesterGallon(u) => u.is_special(),
            Self::PeckPkUs(u) => u.is_special(),
            Self::DryQuart(u) => u.is_special(),
            Self::DryPint(u) => u.is_special(),
            Self::Tablespoon(u) => u.is_special(),
            Self::Teaspoon(u) => u.is_special(),
            Self::Cup(u) => u.is_special(),
            Self::MetricFluidOunce(u) => u.is_special(),
            Self::MetricCup(u) => u.is_special(),
            Self::MetricTeaspoon(u) => u.is_special(),
            Self::MetricTablespoon(u) => u.is_special(),
            Self::Gallon(u) => u.is_special(),
            Self::PeckPkBr(u) => u.is_special(),
            Self::BushelBuBr(u) => u.is_special(),
            Self::QuartQtBr(u) => u.is_special(),
            Self::PintPtBr(u) => u.is_special(),
            Self::GillGilBr(u) => u.is_special(),
            Self::FluidOunceFozBr(u) => u.is_special(),
            Self::FluidDramFdrBr(u) => u.is_special(),
            Self::MinimMinBr(u) => u.is_special(),
            Self::Grain(u) => u.is_special(),
            Self::PoundLbAv(u) => u.is_special(),
            Self::OunceOzAv(u) => u.is_special(),
            Self::DramDrAv(u) => u.is_special(),
            Self::ShortHundredweight(u) => u.is_special(),
            Self::LongHunderdweight(u) => u.is_special(),
            Self::ShortTon(u) => u.is_special(),
            Self::LongTon(u) => u.is_special(),
            Self::Stone(u) => u.is_special(),
            Self::Pennyweight(u) => u.is_special(),
            Self::OunceOzTr(u) => u.is_special(),
            Self::PoundLbTr(u) => u.is_special(),
            Self::Scruple(u) => u.is_special(),
            Self::DramDrAp(u) => u.is_special(),
            Self::OunceOzAp(u) => u.is_special(),
            Self::PoundLbAp(u) => u.is_special(),
            Self::MetricOunce(u) => u.is_special(),
            Self::Line(u) => u.is_special(),
            Self::Point(u) => u.is_special(),
            Self::Pica(u) => u.is_special(),
            Self::PrintersPoint(u) => u.is_special(),
            Self::PrintersPica(u) => u.is_special(),
            Self::Pied(u) => u.is_special(),
            Self::Pouce(u) => u.is_special(),
            Self::Ligne(u) => u.is_special(),
            Self::Didot(u) => u.is_special(),
            Self::Cicero(u) => u.is_special(),
            Self::DegreeRankine(u) => u.is_special(),
            Self::CalorieAt15DegC(u) => u.is_special(),
            Self::CalorieAt20DegC(u) => u.is_special(),
            Self::MeanCalorie(u) => u.is_special(),
            Self::InternationalTableCalorie(u) => u.is_special(),
            Self::ThermochemicalCalorie(u) => u.is_special(),
            Self::Calorie(u) => u.is_special(),
            Self::NutritionLabelCalories(u) => u.is_special(),
            Self::BritishThermalUnitAt39DegF(u) => u.is_special(),
            Self::BritishThermalUnitAt59DegF(u) => u.is_special(),
            Self::BritishThermalUnitAt60DegF(u) => u.is_special(),
            Self::MeanBritishThermalUnit(u) => u.is_special(),
            Self::InternationalTableBritishThermalUnit(u) => u.is_special(),
            Self::ThermochemicalBritishThermalUnit(u) => u.is_special(),
            Self::BritishThermalUnit(u) => u.is_special(),
            Self::Horsepower(u) => u.is_special(),
            Self::Tex(u) => u.is_special(),
            Self::Denier(u) => u.is_special(),
            Self::MeterOfWaterColumn(u) => u.is_special(),
            Self::MeterOfMercuryColumn(u) => u.is_special(),
            Self::InchOfWaterColumn(u) => u.is_special(),
            Self::InchOfMercuryColumn(u) => u.is_special(),
            Self::PeripheralVascularResistanceUnit(u) => u.is_special(),
            Self::WoodUnit(u) => u.is_special(),
            Self::Diopter(u) => u.is_special(),
            Self::Mesh(u) => u.is_special(),
            Self::Charriere(u) => u.is_special(),
            Self::Drop(u) => u.is_special(),
            Self::HounsfieldUnit(u) => u.is_special(),
            Self::MetabolicEquivalent(u) => u.is_special(),
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries(u) => u.is_special(),
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries(u) => u.is_special(),
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries(u) => u.is_special(),
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries(u) => u.is_special(),
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries(u) => u.is_special(),
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries(u) => u.is_special(),
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries(u) => u.is_special(),
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries(u) => u.is_special(),
            Self::Equivalents(u) => u.is_special(),
            Self::Osmole(u) => u.is_special(),
            Self::GramPercent(u) => u.is_special(),
            Self::SvedbergUnit(u) => u.is_special(),
            Self::HighPowerField(u) => u.is_special(),
            Self::LowPowerField(u) => u.is_special(),
            Self::Katal(u) => u.is_special(),
            Self::Unit(u) => u.is_special(),
            Self::InternationalUnitIU(u) => u.is_special(),
            Self::InternationalUnitIu(u) => u.is_special(),
            Self::ArbitraryUnit(u) => u.is_special(),
            Self::UnitedStatesPharmacopeiaUnit(u) => u.is_special(),
            Self::GplUnit(u) => u.is_special(),
            Self::MplUnit(u) => u.is_special(),
            Self::AplUnit(u) => u.is_special(),
            Self::BethesdaUnit(u) => u.is_special(),
            Self::AntiFactorXaUnit(u) => u.is_special(),
            Self::ToddUnit(u) => u.is_special(),
            Self::DyeUnit(u) => u.is_special(),
            Self::SomogyiUnit(u) => u.is_special(),
            Self::BodanskyUnit(u) => u.is_special(),
            Self::KingArmstrongUnit(u) => u.is_special(),
            Self::KunkelUnit(u) => u.is_special(),
            Self::MacLaganUnit(u) => u.is_special(),
            Self::TuberculinUnit(u) => u.is_special(),
            Self::FiftyPercentCellCultureInfectiousDose(u) => u.is_special(),
            Self::FiftyPercentTissueCultureInfectiousDose(u) => u.is_special(),
            Self::FiftyPercentEmbryoInfectiousDose(u) => u.is_special(),
            Self::PlaqueFormingUnits(u) => u.is_special(),
            Self::FocusFormingUnits(u) => u.is_special(),
            Self::ColonyFormingUnits(u) => u.is_special(),
            Self::IndexOfReactivity(u) => u.is_special(),
            Self::BioequivalentAllergenUnit(u) => u.is_special(),
            Self::AllergenUnit(u) => u.is_special(),
            Self::AllergenUnitForAmbrosiaArtemisiifolia(u) => u.is_special(),
            Self::ProteinNitrogenUnit(u) => u.is_special(),
            Self::LimitOfFlocculation(u) => u.is_special(),
            Self::DAntigenUnit(u) => u.is_special(),
            Self::FibrinogenEquivalentUnit(u) => u.is_special(),
            Self::ElisaUnit(u) => u.is_special(),
            Self::EhrlichUnit(u) => u.is_special(),
            Self::Stere(u) => u.is_special(),
            Self::Angstrom(u) => u.is_special(),
            Self::Barn(u) => u.is_special(),
            Self::TechnicalAtmosphere(u) => u.is_special(),
            Self::Mho(u) => u.is_special(),
            Self::PoundPerSquareInch(u) => u.is_special(),
            Self::Circle(u) => u.is_special(),
            Self::Spere(u) => u.is_special(),
            Self::MetricCarat(u) => u.is_special(),
            Self::CaratOfGoldAlloys(u) => u.is_special(),
            Self::Smoot(u) => u.is_special(),
            Self::Bit(u) => u.is_special(),
            Self::Byte(u) => u.is_special(),
            Self::Baud(u) => u.is_special(),
        }
    }
}

impl PartialEq for AtomSymbol {
    fn eq(&self, other: &Self) -> bool {
        self.primary_code() == other.primary_code()
    }
}
