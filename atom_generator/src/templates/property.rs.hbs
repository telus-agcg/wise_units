//-----------------------------------------------------------------------------
// DO NOT EDIT THIS FILE!
// This is generated by wise_units-atom_generator.
//-----------------------------------------------------------------------------

use crate::parser::Atom;
use std::fmt;

/// Property categorizes the unit by use. Not much mention of it in the UCUM
/// HTML spec, but is used throughout the
/// [XML description](http://unitsofmeasure.org/ucum-essence.xml).
///
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum Property {
    {{~ #each properties }}
    {{ @key }},{{ /each }}
}

impl Property {
    /// All `Atom`s that match the `Property` variant.
    ///
    /// ```
    /// extern crate wise_units;
    /// use wise_units::{Atom, Property};
    ///
    /// assert_eq!(Property::Acidity.atoms(), vec![Atom::PH]);
    /// ```
    ///
    #[must_use]
    pub fn atoms(self) -> Vec<Atom> {
        match self {
            {{ #each properties }}
            Self::{{ @key }} => {
                vec![
                    {{ #each this.atom_type_names }}
                    Atom::{{ this }},
                    {{ /each }}
                ]
            },
            {{ /each }}
        }
    }
}

impl Default for Property {
    fn default() -> Self {
        Self::Unclassified
    }
}

impl fmt::Display for Property {
    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {
        let string = match self {
            {{ #each properties as |key value| }}
            Self::{{ @key }} => {
                "{{ @key }}"
            },
            {{ /each }}
        };

        write!(formatter, "{}", string)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn validate_display() {
        let a = format!("{}", Property::Acceleration);
        assert_eq!(&a, "Acceleration");
    }
}
