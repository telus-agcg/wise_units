//-----------------------------------------------------------------------------
// DO NOT EDIT THIS FILE!
// This is generated by wise_units-atom_generator.
//-----------------------------------------------------------------------------

use crate::{
    is_compatible_with::{DefaultCompatibility, IsCompatibleWith},
    parser::{
        definition::Definition, function_set::FunctionSet, Classification, Composable, Composition,
        Dimension, Property, UcumSymbol,
    },
    reducible::Reducible,
    UcumUnit, Unit,
};
use std::fmt;

#[derive(Clone, Copy, Debug, Eq, PartialOrd, Ord, Hash)]
pub enum Atom {
    Meter,
    Second,
    Gram,
    Radian,
    Kelvin,
    Coulomb,
    Candela,
    TheNumberTenForArbitraryPowersStar,
    TheNumberTenForArbitraryPowersCaret,
    TheNumberPi,
    Percent,
    PartsPerThousand,
    PartsPerMillion,
    PartsPerBillion,
    PartsPerTrillion,
    Mole,
    Steradian,
    Hertz,
    Newton,
    Pascal,
    Joule,
    Watt,
    Ampere,
    Volt,
    Farad,
    Ohm,
    Siemens,
    Weber,
    DegreeCelsius,
    Tesla,
    Henry,
    Lumen,
    Lux,
    Becquerel,
    Gray,
    Sievert,
    Gon,
    Degree,
    MinuteAngle,
    SecondAngle,
    Liter,
    LiterSecondary,
    Are,
    Minute,
    Hour,
    Day,
    TropicalYear,
    MeanJulianYear,
    MeanGregorianYear,
    Year,
    Week,
    SynodalMonth,
    MeanJulianMonth,
    MeanGregorianMonth,
    Month,
    Tonne,
    Bar,
    UnifiedAtomicMassUnit,
    Electronvolt,
    AstronomicUnit,
    Parsec,
    VelocityOfLight,
    PlanckConstant,
    BoltzmannConstant,
    PermittivityOfVacuum,
    PermeabilityOfVacuum,
    ElementaryCharge,
    ElectronMass,
    ProtonMass,
    NewtonianConstantOfGravitation,
    StandardAccelerationOfFreeFall,
    StandardAtmosphere,
    LightYear,
    GramForce,
    PoundForceAvoirdupois,
    Kayser,
    Gal,
    Dyne,
    Erg,
    Poise,
    Biot,
    Stokes,
    Maxwell,
    Gauss,
    Oersted,
    Gilbert,
    Stilb,
    Lambert,
    Phot,
    Curie,
    Roentgen,
    RadiationAbsorbedDose,
    RadiationEquivalentMan,
    InchInternational,
    FootInternational,
    YardInternational,
    MileInternational,
    FathomInternational,
    NauticalMileInternational,
    KnotInternational,
    SquareInchInternational,
    SquareFootInternational,
    SquareYardInternational,
    CubicInchInternational,
    CubicFootInternational,
    CubicYardInternational,
    BoardFootInternational,
    CordInternational,
    MilInternational,
    CircularMilInternational,
    HandInternational,
    FootUS,
    YardUS,
    InchUS,
    RodUS,
    GuntersChainUS,
    LinkForGuntersChainUS,
    RamdensChainUS,
    LinkForRamdensChainUS,
    FathomUS,
    FurlongUS,
    MileUS,
    AcreUS,
    SquareRodUS,
    SquareMileUS,
    Section,
    Township,
    MilUS,
    InchBritish,
    FootBritish,
    RodBritish,
    GuntersChainBritish,
    LinkForGuntersChainBritish,
    FathomBritish,
    PaceBritish,
    YardBritish,
    MileBritish,
    NauticalMileBritish,
    KnotBritish,
    AcreBritish,
    QueenAnnesWineGallonUS,
    BarrelUS,
    QuartUS,
    PintUS,
    GillUS,
    FluidOunceUS,
    FluidDramUS,
    MinimUS,
    CordUS,
    BushelUS,
    HistoricalWinchesterGallon,
    PeckUS,
    DryQuartUS,
    DryPintUS,
    TablespoonUS,
    TeaspoonUS,
    CupUS,
    MetricFluidOunce,
    MetricCup,
    MetricTeaspoon,
    MetricTablespoon,
    GallonBritish,
    PeckBritish,
    BushelBritish,
    QuartBritish,
    PintBritish,
    GillBritish,
    FluidOunceBritish,
    FluidDramBritish,
    MinimBritish,
    Grain,
    PoundAvoirdupois,
    OunceAvoirdupois,
    DramAvoirdupois,
    ShortHundredweightAvoirdupois,
    LongHunderdweightAvoirdupois,
    ShortTonAvoirdupois,
    LongTonAvoirdupois,
    StoneAvoirdupois,
    PennyweightTroy,
    OunceTroy,
    PoundTroy,
    ScrupleApothecaries,
    DramApothecaries,
    OunceApothecaries,
    PoundApothecaries,
    MetricOunce,
    Line,
    Point,
    Pica,
    PrintersPoint,
    PrintersPica,
    Pied,
    Pouce,
    Ligne,
    Didot,
    Cicero,
    DegreeFahrenheit,
    DegreeRankine,
    DegreeReaumur,
    CalorieAt15C,
    CalorieAt20C,
    MeanCalorie,
    InternationalTableCalorie,
    ThermochemicalCalorie,
    Calorie,
    NutritionLabelCalories,
    BritishThermalUnitAt39F,
    BritishThermalUnitAt59F,
    BritishThermalUnitAt60F,
    MeanBritishThermalUnit,
    InternationalTableBritishThermalUnit,
    ThermochemicalBritishThermalUnit,
    BritishThermalUnit,
    Horsepower,
    Tex,
    Denier,
    MeterOfWaterColumn,
    MeterOfMercuryColumn,
    InchOfWaterColumn,
    InchOfMercuryColumn,
    PeripheralVascularResistanceUnit,
    WoodUnit,
    Diopter,
    PrismDiopter,
    PercentOfSlope,
    MeshInternational,
    Charriere,
    Drop,
    HounsfieldUnit,
    MetabolicEquivalent,
    HomeopathicPotencyOfDecimalSeriesRetired,
    HomeopathicPotencyOfCentesimalSeriesRetired,
    HomeopathicPotencyOfMillesimalSeriesRetired,
    HomeopathicPotencyOfQuintamillesimalSeriesRetired,
    HomeopathicPotencyOfDecimalHahnemannianSeries,
    HomeopathicPotencyOfCentesimalHahnemannianSeries,
    HomeopathicPotencyOfMillesimalHahnemannianSeries,
    HomeopathicPotencyOfQuintamillesimalHahnemannianSeries,
    HomeopathicPotencyOfDecimalKorsakovianSeries,
    HomeopathicPotencyOfCentesimalKorsakovianSeries,
    HomeopathicPotencyOfMillesimalKorsakovianSeries,
    HomeopathicPotencyOfQuintamillesimalKorsakovianSeries,
    Equivalents,
    Osmole,
    PH,
    GramPercent,
    SvedbergUnit,
    HighPowerField,
    LowPowerField,
    Katal,
    Unit,
    InternationalUnit,
    InternationalUnitSecondary,
    ArbitraryUnit,
    UnitedStatesPharmacopeiaUnit,
    GplUnit,
    MplUnit,
    AplUnit,
    BethesdaUnit,
    AntiFactorXaUnit,
    ToddUnit,
    DyeUnit,
    SomogyiUnit,
    BodanskyUnit,
    KingArmstrongUnit,
    KunkelUnit,
    MacLaganUnit,
    TuberculinUnit,
    CellCultureInfectiousDose,
    TissueCultureInfectiousDose,
    EmbryoInfectiousDose,
    PlaqueFormingUnits,
    FocusFormingUnits,
    ColonyFormingUnits,
    IndexOfReactivity,
    BioequivalentAllergenUnit,
    AllergenUnit,
    AllergenUnitForAmbrosiaArtemisiifolia,
    ProteinNitrogenUnit,
    LimitOfFlocculation,
    DAntigenUnit,
    FibrinogenEquivalentUnit,
    ElisaUnit,
    EhrlichUnit,
    Neper,
    Bel,
    BelSoundPressure,
    BelVolt,
    BelMillivolt,
    BelMicrovolt,
    Bel10Nanovolt,
    BelWatt,
    BelKilowatt,
    Stere,
    Angstrom,
    Barn,
    TechnicalAtmosphere,
    Mho,
    PoundPerSqareInch,
    Circle,
    Spere,
    MetricCarat,
    CaratOfGoldAlloys,
    Smoot,
    MeterPerSquareSecondsPerSquareRootOfHertz,
    BitLogarithmusDualis,
    Bit,
    Byte,
    Baud,
}

impl Atom {
    pub(crate) fn definition(self) -> Definition {
        let result = match self {
            Self::Meter => Ok(Definition::default()),
            Self::Second => Ok(Definition::default()),
            Self::Gram => Ok(Definition::default()),
            Self::Radian => Ok(Definition::default()),
            Self::Kelvin => Ok(Definition::default()),
            Self::Coulomb => Ok(Definition::default()),
            Self::Candela => Ok(Definition::default()),
            Self::TheNumberTenForArbitraryPowersStar => Definition::new(10.0, "1", None),
            Self::TheNumberTenForArbitraryPowersCaret => Definition::new(10.0, "1", None),
            Self::TheNumberPi => Definition::new(::std::f64::consts::PI, "1", None),
            Self::Percent => Definition::new(1.0, "10*-2", None),
            Self::PartsPerThousand => Definition::new(1.0, "10*-3", None),
            Self::PartsPerMillion => Definition::new(1.0, "10*-6", None),
            Self::PartsPerBillion => Definition::new(1.0, "10*-9", None),
            Self::PartsPerTrillion => Definition::new(1.0, "10*-12", None),
            Self::Mole => Definition::new(6.0221367, "10*23", None),
            Self::Steradian => Definition::new(1.0, "rad2", None),
            Self::Hertz => Definition::new(1.0, "s-1", None),
            Self::Newton => Definition::new(1.0, "kg.m/s2", None),
            Self::Pascal => Definition::new(1.0, "N/m2", None),
            Self::Joule => Definition::new(1.0, "N.m", None),
            Self::Watt => Definition::new(1.0, "J/s", None),
            Self::Ampere => Definition::new(1.0, "C/s", None),
            Self::Volt => Definition::new(1.0, "J/C", None),
            Self::Farad => Definition::new(1.0, "C/V", None),
            Self::Ohm => Definition::new(1.0, "V/A", None),
            Self::Siemens => Definition::new(1.0, "Ohm-1", None),
            Self::Weber => Definition::new(1.0, "V.s", None),
            Self::DegreeCelsius => Definition::new(
                1.0,
                "K",
                Some(FunctionSet {
                    convert_from: |value: f64| value - 273.15,
                    convert_to: |value: f64| value + 273.15,
                }),
            ),
            Self::Tesla => Definition::new(1.0, "Wb/m2", None),
            Self::Henry => Definition::new(1.0, "Wb/A", None),
            Self::Lumen => Definition::new(1.0, "cd.sr", None),
            Self::Lux => Definition::new(1.0, "lm/m2", None),
            Self::Becquerel => Definition::new(1.0, "s-1", None),
            Self::Gray => Definition::new(1.0, "J/kg", None),
            Self::Sievert => Definition::new(1.0, "J/kg", None),
            Self::Gon => Definition::new(0.9, "deg", None),
            Self::Degree => Definition::new(2.0, "[pi].rad/360", None),
            Self::MinuteAngle => Definition::new(1.0, "deg/60", None),
            Self::SecondAngle => Definition::new(1.0, "'/60", None),
            Self::Liter => Definition::new(1.0, "dm3", None),
            Self::LiterSecondary => Definition::new(1.0, "l", None),
            Self::Are => Definition::new(100.0, "m2", None),
            Self::Minute => Definition::new(60.0, "s", None),
            Self::Hour => Definition::new(60.0, "min", None),
            Self::Day => Definition::new(24.0, "h", None),
            Self::TropicalYear => Definition::new(365.24219, "d", None),
            Self::MeanJulianYear => Definition::new(365.25, "d", None),
            Self::MeanGregorianYear => Definition::new(365.2425, "d", None),
            Self::Year => Definition::new(1.0, "a_j", None),
            Self::Week => Definition::new(7.0, "d", None),
            Self::SynodalMonth => Definition::new(29.53059, "d", None),
            Self::MeanJulianMonth => Definition::new(1.0, "a_j/12", None),
            Self::MeanGregorianMonth => Definition::new(1.0, "a_g/12", None),
            Self::Month => Definition::new(1.0, "mo_j", None),
            Self::Tonne => Definition::new(1000.0, "kg", None),
            Self::Bar => Definition::new(100000.0, "Pa", None),
            Self::UnifiedAtomicMassUnit => Definition::new(1.6605402e-24, "g", None),
            Self::Electronvolt => Definition::new(1.0, "[e].V", None),
            Self::AstronomicUnit => Definition::new(149597.870691, "Mm", None),
            Self::Parsec => Definition::new(3.085678e16, "m", None),
            Self::VelocityOfLight => Definition::new(299792458.0, "m/s", None),
            Self::PlanckConstant => Definition::new(6.6260755e-34, "J.s", None),
            Self::BoltzmannConstant => Definition::new(1.380658e-23, "J/K", None),
            Self::PermittivityOfVacuum => Definition::new(8.854187817e-12, "F/m", None),
            Self::PermeabilityOfVacuum => Definition::new(1.0, "4.[pi].10*-7.N/A2", None),
            Self::ElementaryCharge => Definition::new(1.60217733e-19, "C", None),
            Self::ElectronMass => Definition::new(9.1093897e-28, "g", None),
            Self::ProtonMass => Definition::new(1.6726231e-24, "g", None),
            Self::NewtonianConstantOfGravitation => {
                Definition::new(6.67259e-11, "m3.kg-1.s-2", None)
            }
            Self::StandardAccelerationOfFreeFall => Definition::new(9.80665, "m/s2", None),
            Self::StandardAtmosphere => Definition::new(101325.0, "Pa", None),
            Self::LightYear => Definition::new(1.0, "[c].a_j", None),
            Self::GramForce => Definition::new(1.0, "g.[g]", None),
            Self::PoundForceAvoirdupois => Definition::new(1.0, "[lb_av].[g]", None),
            Self::Kayser => Definition::new(1.0, "cm-1", None),
            Self::Gal => Definition::new(1.0, "cm/s2", None),
            Self::Dyne => Definition::new(1.0, "g.cm/s2", None),
            Self::Erg => Definition::new(1.0, "dyn.cm", None),
            Self::Poise => Definition::new(1.0, "dyn.s/cm2", None),
            Self::Biot => Definition::new(10.0, "A", None),
            Self::Stokes => Definition::new(1.0, "cm2/s", None),
            Self::Maxwell => Definition::new(1e-8, "Wb", None),
            Self::Gauss => Definition::new(0.0001, "T", None),
            Self::Oersted => Definition::new(250.0, "/[pi].A/m", None),
            Self::Gilbert => Definition::new(1.0, "Oe.cm", None),
            Self::Stilb => Definition::new(1.0, "cd/cm2", None),
            Self::Lambert => Definition::new(1.0, "cd/cm2/[pi]", None),
            Self::Phot => Definition::new(0.0001, "lx", None),
            Self::Curie => Definition::new(37000000000.0, "Bq", None),
            Self::Roentgen => Definition::new(0.000258, "C/kg", None),
            Self::RadiationAbsorbedDose => Definition::new(100.0, "erg/g", None),
            Self::RadiationEquivalentMan => Definition::new(1.0, "RAD", None),
            Self::InchInternational => Definition::new(2.54, "cm", None),
            Self::FootInternational => Definition::new(12.0, "[in_i]", None),
            Self::YardInternational => Definition::new(3.0, "[ft_i]", None),
            Self::MileInternational => Definition::new(5280.0, "[ft_i]", None),
            Self::FathomInternational => Definition::new(6.0, "[ft_i]", None),
            Self::NauticalMileInternational => Definition::new(1852.0, "m", None),
            Self::KnotInternational => Definition::new(1.0, "[nmi_i]/h", None),
            Self::SquareInchInternational => Definition::new(1.0, "[in_i]2", None),
            Self::SquareFootInternational => Definition::new(1.0, "[ft_i]2", None),
            Self::SquareYardInternational => Definition::new(1.0, "[yd_i]2", None),
            Self::CubicInchInternational => Definition::new(1.0, "[in_i]3", None),
            Self::CubicFootInternational => Definition::new(1.0, "[ft_i]3", None),
            Self::CubicYardInternational => Definition::new(1.0, "[yd_i]3", None),
            Self::BoardFootInternational => Definition::new(144.0, "[in_i]3", None),
            Self::CordInternational => Definition::new(128.0, "[ft_i]3", None),
            Self::MilInternational => Definition::new(0.001, "[in_i]", None),
            Self::CircularMilInternational => Definition::new(1.0, "[pi]/4.[mil_i]2", None),
            Self::HandInternational => Definition::new(4.0, "[in_i]", None),
            Self::FootUS => Definition::new(1200.0, "m/3937", None),
            Self::YardUS => Definition::new(3.0, "[ft_us]", None),
            Self::InchUS => Definition::new(1.0, "[ft_us]/12", None),
            Self::RodUS => Definition::new(16.5, "[ft_us]", None),
            Self::GuntersChainUS => Definition::new(4.0, "[rd_us]", None),
            Self::LinkForGuntersChainUS => Definition::new(1.0, "[ch_us]/100", None),
            Self::RamdensChainUS => Definition::new(100.0, "[ft_us]", None),
            Self::LinkForRamdensChainUS => Definition::new(1.0, "[rch_us]/100", None),
            Self::FathomUS => Definition::new(6.0, "[ft_us]", None),
            Self::FurlongUS => Definition::new(40.0, "[rd_us]", None),
            Self::MileUS => Definition::new(8.0, "[fur_us]", None),
            Self::AcreUS => Definition::new(160.0, "[rd_us]2", None),
            Self::SquareRodUS => Definition::new(1.0, "[rd_us]2", None),
            Self::SquareMileUS => Definition::new(1.0, "[mi_us]2", None),
            Self::Section => Definition::new(1.0, "[mi_us]2", None),
            Self::Township => Definition::new(36.0, "[sct]", None),
            Self::MilUS => Definition::new(0.001, "[in_us]", None),
            Self::InchBritish => Definition::new(2.539998, "cm", None),
            Self::FootBritish => Definition::new(12.0, "[in_br]", None),
            Self::RodBritish => Definition::new(16.5, "[ft_br]", None),
            Self::GuntersChainBritish => Definition::new(4.0, "[rd_br]", None),
            Self::LinkForGuntersChainBritish => Definition::new(1.0, "[ch_br]/100", None),
            Self::FathomBritish => Definition::new(6.0, "[ft_br]", None),
            Self::PaceBritish => Definition::new(2.5, "[ft_br]", None),
            Self::YardBritish => Definition::new(3.0, "[ft_br]", None),
            Self::MileBritish => Definition::new(5280.0, "[ft_br]", None),
            Self::NauticalMileBritish => Definition::new(6080.0, "[ft_br]", None),
            Self::KnotBritish => Definition::new(1.0, "[nmi_br]/h", None),
            Self::AcreBritish => Definition::new(4840.0, "[yd_br]2", None),
            Self::QueenAnnesWineGallonUS => Definition::new(231.0, "[in_i]3", None),
            Self::BarrelUS => Definition::new(42.0, "[gal_us]", None),
            Self::QuartUS => Definition::new(1.0, "[gal_us]/4", None),
            Self::PintUS => Definition::new(1.0, "[qt_us]/2", None),
            Self::GillUS => Definition::new(1.0, "[pt_us]/4", None),
            Self::FluidOunceUS => Definition::new(1.0, "[gil_us]/4", None),
            Self::FluidDramUS => Definition::new(1.0, "[foz_us]/8", None),
            Self::MinimUS => Definition::new(1.0, "[fdr_us]/60", None),
            Self::CordUS => Definition::new(128.0, "[ft_i]3", None),
            Self::BushelUS => Definition::new(2150.42, "[in_i]3", None),
            Self::HistoricalWinchesterGallon => Definition::new(1.0, "[bu_us]/8", None),
            Self::PeckUS => Definition::new(1.0, "[bu_us]/4", None),
            Self::DryQuartUS => Definition::new(1.0, "[pk_us]/8", None),
            Self::DryPintUS => Definition::new(1.0, "[dqt_us]/2", None),
            Self::TablespoonUS => Definition::new(1.0, "[foz_us]/2", None),
            Self::TeaspoonUS => Definition::new(1.0, "[tbs_us]/3", None),
            Self::CupUS => Definition::new(16.0, "[tbs_us]", None),
            Self::MetricFluidOunce => Definition::new(30.0, "mL", None),
            Self::MetricCup => Definition::new(240.0, "mL", None),
            Self::MetricTeaspoon => Definition::new(5.0, "mL", None),
            Self::MetricTablespoon => Definition::new(15.0, "mL", None),
            Self::GallonBritish => Definition::new(4.54609, "l", None),
            Self::PeckBritish => Definition::new(2.0, "[gal_br]", None),
            Self::BushelBritish => Definition::new(4.0, "[pk_br]", None),
            Self::QuartBritish => Definition::new(1.0, "[gal_br]/4", None),
            Self::PintBritish => Definition::new(1.0, "[qt_br]/2", None),
            Self::GillBritish => Definition::new(1.0, "[pt_br]/4", None),
            Self::FluidOunceBritish => Definition::new(1.0, "[gil_br]/5", None),
            Self::FluidDramBritish => Definition::new(1.0, "[foz_br]/8", None),
            Self::MinimBritish => Definition::new(1.0, "[fdr_br]/60", None),
            Self::Grain => Definition::new(64.79891, "mg", None),
            Self::PoundAvoirdupois => Definition::new(7000.0, "[gr]", None),
            Self::OunceAvoirdupois => Definition::new(1.0, "[lb_av]/16", None),
            Self::DramAvoirdupois => Definition::new(1.0, "[oz_av]/16", None),
            Self::ShortHundredweightAvoirdupois => Definition::new(100.0, "[lb_av]", None),
            Self::LongHunderdweightAvoirdupois => Definition::new(112.0, "[lb_av]", None),
            Self::ShortTonAvoirdupois => Definition::new(20.0, "[scwt_av]", None),
            Self::LongTonAvoirdupois => Definition::new(20.0, "[lcwt_av]", None),
            Self::StoneAvoirdupois => Definition::new(14.0, "[lb_av]", None),
            Self::PennyweightTroy => Definition::new(24.0, "[gr]", None),
            Self::OunceTroy => Definition::new(20.0, "[pwt_tr]", None),
            Self::PoundTroy => Definition::new(12.0, "[oz_tr]", None),
            Self::ScrupleApothecaries => Definition::new(20.0, "[gr]", None),
            Self::DramApothecaries => Definition::new(3.0, "[sc_ap]", None),
            Self::OunceApothecaries => Definition::new(8.0, "[dr_ap]", None),
            Self::PoundApothecaries => Definition::new(12.0, "[oz_ap]", None),
            Self::MetricOunce => Definition::new(28.0, "g", None),
            Self::Line => Definition::new(1.0, "[in_i]/12", None),
            Self::Point => Definition::new(1.0, "[lne]/6", None),
            Self::Pica => Definition::new(12.0, "[pnt]", None),
            Self::PrintersPoint => Definition::new(0.013837, "[in_i]", None),
            Self::PrintersPica => Definition::new(12.0, "[pnt_pr]", None),
            Self::Pied => Definition::new(32.48, "cm", None),
            Self::Pouce => Definition::new(1.0, "[pied]/12", None),
            Self::Ligne => Definition::new(1.0, "[pouce]/12", None),
            Self::Didot => Definition::new(1.0, "[ligne]/6", None),
            Self::Cicero => Definition::new(12.0, "[didot]", None),
            Self::DegreeFahrenheit => Definition::new(
                5.0,
                "K/9",
                Some(FunctionSet {
                    convert_from: |value: f64| 9.0 * value / 5.0 - 459.67,
                    convert_to: |value: f64| 5.0 / 9.0 * (value + 459.67),
                }),
            ),
            Self::DegreeRankine => Definition::new(5.0, "K/9", None),
            Self::DegreeReaumur => Definition::new(
                5.0,
                "K/4",
                Some(FunctionSet {
                    convert_from: |value: f64| (value - 273.15) * 0.8,
                    convert_to: |value: f64| (value / 0.8) + 273.15,
                }),
            ),
            Self::CalorieAt15C => Definition::new(4.1858, "J", None),
            Self::CalorieAt20C => Definition::new(4.1819, "J", None),
            Self::MeanCalorie => Definition::new(4.19002, "J", None),
            Self::InternationalTableCalorie => Definition::new(4.1868, "J", None),
            Self::ThermochemicalCalorie => Definition::new(4.184, "J", None),
            Self::Calorie => Definition::new(1.0, "cal_th", None),
            Self::NutritionLabelCalories => Definition::new(1.0, "kcal_th", None),
            Self::BritishThermalUnitAt39F => Definition::new(1.05967, "kJ", None),
            Self::BritishThermalUnitAt59F => Definition::new(1.0548, "kJ", None),
            Self::BritishThermalUnitAt60F => Definition::new(1.05468, "kJ", None),
            Self::MeanBritishThermalUnit => Definition::new(1.05587, "kJ", None),
            Self::InternationalTableBritishThermalUnit => {
                Definition::new(1.05505585262, "kJ", None)
            }
            Self::ThermochemicalBritishThermalUnit => Definition::new(1.05435, "kJ", None),
            Self::BritishThermalUnit => Definition::new(1.0, "[Btu_th]", None),
            Self::Horsepower => Definition::new(550.0, "[ft_i].[lbf_av]/s", None),
            Self::Tex => Definition::new(1.0, "g/km", None),
            Self::Denier => Definition::new(1.0, "g/9/km", None),
            Self::MeterOfWaterColumn => Definition::new(9.80665, "kPa", None),
            Self::MeterOfMercuryColumn => Definition::new(133.322, "kPa", None),
            Self::InchOfWaterColumn => Definition::new(1.0, "m[H2O].[in_i]/m", None),
            Self::InchOfMercuryColumn => Definition::new(1.0, "m[Hg].[in_i]/m", None),
            Self::PeripheralVascularResistanceUnit => Definition::new(1.0, "mm[Hg].s/ml", None),
            Self::WoodUnit => Definition::new(1.0, "mm[Hg].min/L", None),
            Self::Diopter => Definition::new(1.0, "/m", None),
            Self::PrismDiopter => Definition::new(
                1.0,
                "rad",
                Some(FunctionSet {
                    convert_from: |value: f64| (value / 100.0).atan(),
                    convert_to: |value: f64| value.tan() * 100.0,
                }),
            ),
            Self::PercentOfSlope => Definition::new(
                1.0,
                "deg",
                Some(FunctionSet {
                    convert_from: |value: f64| (value / 100.0).atan(),
                    convert_to: |value: f64| value.tan() * 100.0,
                }),
            ),
            Self::MeshInternational => Definition::new(1.0, "/[in_i]", None),
            Self::Charriere => Definition::new(1.0, "mm/3", None),
            Self::Drop => Definition::new(1.0, "ml/20", None),
            Self::HounsfieldUnit => Ok(Definition::default()),
            Self::MetabolicEquivalent => Definition::new(3.5, "mL/min/kg", None),
            Self::HomeopathicPotencyOfDecimalSeriesRetired => Definition::new(
                1.0,
                "1",
                Some(FunctionSet {
                    convert_from: |value: f64| -value.log10(),
                    convert_to: |value: f64| 10_f64.powf(-value),
                }),
            ),
            Self::HomeopathicPotencyOfCentesimalSeriesRetired => Definition::new(
                1.0,
                "1",
                Some(FunctionSet {
                    convert_from: |value: f64| -value.ln() / 100_f64.ln(),
                    convert_to: |value: f64| 100_f64.powf(-value),
                }),
            ),
            Self::HomeopathicPotencyOfMillesimalSeriesRetired => Definition::new(
                1.0,
                "1",
                Some(FunctionSet {
                    convert_from: |value: f64| -value.ln() / 1_000_f64.ln(),
                    convert_to: |value: f64| 1_000_f64.powf(-value),
                }),
            ),
            Self::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Definition::new(
                1.0,
                "1",
                Some(FunctionSet {
                    convert_from: |value: f64| -value.ln() / 50_000_f64.ln(),
                    convert_to: |value: f64| 50_000_f64.powf(-value),
                }),
            ),
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries => Ok(Definition::default()),
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries => Ok(Definition::default()),
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries => Ok(Definition::default()),
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => {
                Ok(Definition::default())
            }
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries => Ok(Definition::default()),
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries => Ok(Definition::default()),
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries => Ok(Definition::default()),
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => {
                Ok(Definition::default())
            }
            Self::Equivalents => Definition::new(1.0, "mol", None),
            Self::Osmole => Definition::new(1.0, "mol", None),
            Self::PH => Definition::new(
                1.0,
                "mol/l",
                Some(FunctionSet {
                    convert_from: |value: f64| 10.0_f64.powf(-value),
                    convert_to: |value: f64| -value.log10(),
                }),
            ),
            Self::GramPercent => Definition::new(1.0, "g/dl", None),
            Self::SvedbergUnit => Definition::new(1.0, "10*-13.s", None),
            Self::HighPowerField => Ok(Definition::default()),
            Self::LowPowerField => Definition::new(100.0, "1", None),
            Self::Katal => Definition::new(1.0, "mol/s", None),
            Self::Unit => Definition::new(1.0, "umol/min", None),
            Self::InternationalUnit => Ok(Definition::default()),
            Self::InternationalUnitSecondary => Definition::new(1.0, "[iU]", None),
            Self::ArbitraryUnit => Ok(Definition::default()),
            Self::UnitedStatesPharmacopeiaUnit => Ok(Definition::default()),
            Self::GplUnit => Ok(Definition::default()),
            Self::MplUnit => Ok(Definition::default()),
            Self::AplUnit => Ok(Definition::default()),
            Self::BethesdaUnit => Ok(Definition::default()),
            Self::AntiFactorXaUnit => Ok(Definition::default()),
            Self::ToddUnit => Ok(Definition::default()),
            Self::DyeUnit => Ok(Definition::default()),
            Self::SomogyiUnit => Ok(Definition::default()),
            Self::BodanskyUnit => Ok(Definition::default()),
            Self::KingArmstrongUnit => Ok(Definition::default()),
            Self::KunkelUnit => Ok(Definition::default()),
            Self::MacLaganUnit => Ok(Definition::default()),
            Self::TuberculinUnit => Ok(Definition::default()),
            Self::CellCultureInfectiousDose => Ok(Definition::default()),
            Self::TissueCultureInfectiousDose => Ok(Definition::default()),
            Self::EmbryoInfectiousDose => Ok(Definition::default()),
            Self::PlaqueFormingUnits => Ok(Definition::default()),
            Self::FocusFormingUnits => Ok(Definition::default()),
            Self::ColonyFormingUnits => Ok(Definition::default()),
            Self::IndexOfReactivity => Ok(Definition::default()),
            Self::BioequivalentAllergenUnit => Ok(Definition::default()),
            Self::AllergenUnit => Ok(Definition::default()),
            Self::AllergenUnitForAmbrosiaArtemisiifolia => Ok(Definition::default()),
            Self::ProteinNitrogenUnit => Ok(Definition::default()),
            Self::LimitOfFlocculation => Ok(Definition::default()),
            Self::DAntigenUnit => Ok(Definition::default()),
            Self::FibrinogenEquivalentUnit => Ok(Definition::default()),
            Self::ElisaUnit => Ok(Definition::default()),
            Self::EhrlichUnit => Ok(Definition::default()),
            Self::Neper => Definition::new(
                1.0,
                "1",
                Some(FunctionSet {
                    convert_from: |value: f64| value.ln(),
                    convert_to: |value: f64| value.exp(),
                }),
            ),
            Self::Bel => Definition::new(
                1.0,
                "1",
                Some(FunctionSet {
                    convert_from: |value: f64| value.log10(),
                    convert_to: |value: f64| 10_f64.powf(value),
                }),
            ),
            Self::BelSoundPressure => Definition::new(
                2.0,
                "10*-5.Pa",
                Some(FunctionSet {
                    convert_from: |value: f64| 2.0 * value.log10(),
                    convert_to: |value: f64| 10_f64.powf(value / 2.0),
                }),
            ),
            Self::BelVolt => Definition::new(
                1.0,
                "V",
                Some(FunctionSet {
                    convert_from: |value: f64| 2.0 * value.log10(),
                    convert_to: |value: f64| 10_f64.powf(value / 2.0),
                }),
            ),
            Self::BelMillivolt => Definition::new(
                1.0,
                "mV",
                Some(FunctionSet {
                    convert_from: |value: f64| 2.0 * value.log10(),
                    convert_to: |value: f64| 10_f64.powf(value / 2.0),
                }),
            ),
            Self::BelMicrovolt => Definition::new(
                1.0,
                "uV",
                Some(FunctionSet {
                    convert_from: |value: f64| 2.0 * value.log10(),
                    convert_to: |value: f64| 10_f64.powf(value / 2.0),
                }),
            ),
            Self::Bel10Nanovolt => Definition::new(
                10.0,
                "nV",
                Some(FunctionSet {
                    convert_from: |value: f64| 2.0 * value.log10(),
                    convert_to: |value: f64| 10_f64.powf(value / 2.0),
                }),
            ),
            Self::BelWatt => Definition::new(
                1.0,
                "W",
                Some(FunctionSet {
                    convert_from: |value: f64| value.log10(),
                    convert_to: |value: f64| 10_f64.powf(value),
                }),
            ),
            Self::BelKilowatt => Definition::new(
                1.0,
                "kW",
                Some(FunctionSet {
                    convert_from: |value: f64| value.log10(),
                    convert_to: |value: f64| 10_f64.powf(value),
                }),
            ),
            Self::Stere => Definition::new(1.0, "m3", None),
            Self::Angstrom => Definition::new(0.1, "nm", None),
            Self::Barn => Definition::new(100.0, "fm2", None),
            Self::TechnicalAtmosphere => Definition::new(1.0, "kgf/cm2", None),
            Self::Mho => Definition::new(1.0, "S", None),
            Self::PoundPerSqareInch => Definition::new(1.0, "[lbf_av]/[in_i]2", None),
            Self::Circle => Definition::new(2.0, "[pi].rad", None),
            Self::Spere => Definition::new(4.0, "[pi].sr", None),
            Self::MetricCarat => Definition::new(0.2, "g", None),
            Self::CaratOfGoldAlloys => Definition::new(1.0, "/24", None),
            Self::Smoot => Definition::new(67.0, "[in_i]", None),
            Self::MeterPerSquareSecondsPerSquareRootOfHertz => Definition::new(
                1.0,
                "m2/s4/Hz",
                Some(FunctionSet {
                    convert_from: |value: f64| value.sqrt(),
                    convert_to: |value: f64| value * value,
                }),
            ),
            Self::BitLogarithmusDualis => Definition::new(
                1.0,
                "1",
                Some(FunctionSet {
                    convert_from: |value: f64| value.log2(),
                    convert_to: |value: f64| value.exp2(),
                }),
            ),
            Self::Bit => Ok(Definition::default()),
            Self::Byte => Definition::new(8.0, "bit", None),
            Self::Baud => Definition::new(1.0, "/s", None),
        };

        result.expect("BUG! Bad Atom -> Definition mapping!")
    }

    #[must_use]
    pub const fn property(self) -> Property {
        match self {
            Self::Meter => Property::Length,
            Self::Second => Property::Time,
            Self::Gram => Property::Mass,
            Self::Radian => Property::PlaneAngle,
            Self::Kelvin => Property::Temperature,
            Self::Coulomb => Property::ElectricCharge,
            Self::Candela => Property::LuminousIntensity,
            Self::TheNumberTenForArbitraryPowersStar => Property::Number,
            Self::TheNumberTenForArbitraryPowersCaret => Property::Number,
            Self::TheNumberPi => Property::Number,
            Self::Percent => Property::Fraction,
            Self::PartsPerThousand => Property::Fraction,
            Self::PartsPerMillion => Property::Fraction,
            Self::PartsPerBillion => Property::Fraction,
            Self::PartsPerTrillion => Property::Fraction,
            Self::Mole => Property::AmountOfSubstance,
            Self::Steradian => Property::SolidAngle,
            Self::Hertz => Property::Frequency,
            Self::Newton => Property::Force,
            Self::Pascal => Property::Pressure,
            Self::Joule => Property::Energy,
            Self::Watt => Property::Power,
            Self::Ampere => Property::ElectricCurrent,
            Self::Volt => Property::ElectricPotential,
            Self::Farad => Property::ElectricCapacitance,
            Self::Ohm => Property::ElectricResistance,
            Self::Siemens => Property::ElectricConductance,
            Self::Weber => Property::MagneticFlux,
            Self::DegreeCelsius => Property::Temperature,
            Self::Tesla => Property::MagneticFluxDensity,
            Self::Henry => Property::Inductance,
            Self::Lumen => Property::LuminousFlux,
            Self::Lux => Property::Illuminance,
            Self::Becquerel => Property::Radioactivity,
            Self::Gray => Property::EnergyDose,
            Self::Sievert => Property::DoseEquivalent,
            Self::Gon => Property::PlaneAngle,
            Self::Degree => Property::PlaneAngle,
            Self::MinuteAngle => Property::PlaneAngle,
            Self::SecondAngle => Property::PlaneAngle,
            Self::Liter => Property::Volume,
            Self::LiterSecondary => Property::Volume,
            Self::Are => Property::Area,
            Self::Minute => Property::Time,
            Self::Hour => Property::Time,
            Self::Day => Property::Time,
            Self::TropicalYear => Property::Time,
            Self::MeanJulianYear => Property::Time,
            Self::MeanGregorianYear => Property::Time,
            Self::Year => Property::Time,
            Self::Week => Property::Time,
            Self::SynodalMonth => Property::Time,
            Self::MeanJulianMonth => Property::Time,
            Self::MeanGregorianMonth => Property::Time,
            Self::Month => Property::Time,
            Self::Tonne => Property::Mass,
            Self::Bar => Property::Pressure,
            Self::UnifiedAtomicMassUnit => Property::Mass,
            Self::Electronvolt => Property::Energy,
            Self::AstronomicUnit => Property::Length,
            Self::Parsec => Property::Length,
            Self::VelocityOfLight => Property::Velocity,
            Self::PlanckConstant => Property::Action,
            Self::BoltzmannConstant => Property::Unclassified,
            Self::PermittivityOfVacuum => Property::ElectricPermittivity,
            Self::PermeabilityOfVacuum => Property::MagneticPermeability,
            Self::ElementaryCharge => Property::ElectricCharge,
            Self::ElectronMass => Property::Mass,
            Self::ProtonMass => Property::Mass,
            Self::NewtonianConstantOfGravitation => Property::Unclassified,
            Self::StandardAccelerationOfFreeFall => Property::Acceleration,
            Self::StandardAtmosphere => Property::Pressure,
            Self::LightYear => Property::Length,
            Self::GramForce => Property::Force,
            Self::PoundForceAvoirdupois => Property::Force,
            Self::Kayser => Property::LineicNumber,
            Self::Gal => Property::Acceleration,
            Self::Dyne => Property::Force,
            Self::Erg => Property::Energy,
            Self::Poise => Property::DynamicViscosity,
            Self::Biot => Property::ElectricCurrent,
            Self::Stokes => Property::KinematicViscosity,
            Self::Maxwell => Property::FluxOfMagneticInduction,
            Self::Gauss => Property::MagneticFluxDensity,
            Self::Oersted => Property::MagneticFieldIntensity,
            Self::Gilbert => Property::MagneticTension,
            Self::Stilb => Property::LumIntensityDensity,
            Self::Lambert => Property::Brightness,
            Self::Phot => Property::Illuminance,
            Self::Curie => Property::Radioactivity,
            Self::Roentgen => Property::IonDose,
            Self::RadiationAbsorbedDose => Property::EnergyDose,
            Self::RadiationEquivalentMan => Property::DoseEquivalent,
            Self::InchInternational => Property::Length,
            Self::FootInternational => Property::Length,
            Self::YardInternational => Property::Length,
            Self::MileInternational => Property::Length,
            Self::FathomInternational => Property::DepthOfWater,
            Self::NauticalMileInternational => Property::Length,
            Self::KnotInternational => Property::Velocity,
            Self::SquareInchInternational => Property::Area,
            Self::SquareFootInternational => Property::Area,
            Self::SquareYardInternational => Property::Area,
            Self::CubicInchInternational => Property::Volume,
            Self::CubicFootInternational => Property::Volume,
            Self::CubicYardInternational => Property::Volume,
            Self::BoardFootInternational => Property::Volume,
            Self::CordInternational => Property::Volume,
            Self::MilInternational => Property::Length,
            Self::CircularMilInternational => Property::Area,
            Self::HandInternational => Property::HeightOfHorses,
            Self::FootUS => Property::Length,
            Self::YardUS => Property::Length,
            Self::InchUS => Property::Length,
            Self::RodUS => Property::Length,
            Self::GuntersChainUS => Property::Length,
            Self::LinkForGuntersChainUS => Property::Length,
            Self::RamdensChainUS => Property::Length,
            Self::LinkForRamdensChainUS => Property::Length,
            Self::FathomUS => Property::Length,
            Self::FurlongUS => Property::Length,
            Self::MileUS => Property::Length,
            Self::AcreUS => Property::Area,
            Self::SquareRodUS => Property::Area,
            Self::SquareMileUS => Property::Area,
            Self::Section => Property::Area,
            Self::Township => Property::Area,
            Self::MilUS => Property::Length,
            Self::InchBritish => Property::Length,
            Self::FootBritish => Property::Length,
            Self::RodBritish => Property::Length,
            Self::GuntersChainBritish => Property::Length,
            Self::LinkForGuntersChainBritish => Property::Length,
            Self::FathomBritish => Property::Length,
            Self::PaceBritish => Property::Length,
            Self::YardBritish => Property::Length,
            Self::MileBritish => Property::Length,
            Self::NauticalMileBritish => Property::Length,
            Self::KnotBritish => Property::Velocity,
            Self::AcreBritish => Property::Area,
            Self::QueenAnnesWineGallonUS => Property::FluidVolume,
            Self::BarrelUS => Property::FluidVolume,
            Self::QuartUS => Property::FluidVolume,
            Self::PintUS => Property::FluidVolume,
            Self::GillUS => Property::FluidVolume,
            Self::FluidOunceUS => Property::FluidVolume,
            Self::FluidDramUS => Property::FluidVolume,
            Self::MinimUS => Property::FluidVolume,
            Self::CordUS => Property::FluidVolume,
            Self::BushelUS => Property::DryVolume,
            Self::HistoricalWinchesterGallon => Property::DryVolume,
            Self::PeckUS => Property::DryVolume,
            Self::DryQuartUS => Property::DryVolume,
            Self::DryPintUS => Property::DryVolume,
            Self::TablespoonUS => Property::Volume,
            Self::TeaspoonUS => Property::Volume,
            Self::CupUS => Property::Volume,
            Self::MetricFluidOunce => Property::FluidVolume,
            Self::MetricCup => Property::Volume,
            Self::MetricTeaspoon => Property::Volume,
            Self::MetricTablespoon => Property::Volume,
            Self::GallonBritish => Property::Volume,
            Self::PeckBritish => Property::Volume,
            Self::BushelBritish => Property::Volume,
            Self::QuartBritish => Property::Volume,
            Self::PintBritish => Property::Volume,
            Self::GillBritish => Property::Volume,
            Self::FluidOunceBritish => Property::Volume,
            Self::FluidDramBritish => Property::Volume,
            Self::MinimBritish => Property::Volume,
            Self::Grain => Property::Mass,
            Self::PoundAvoirdupois => Property::Mass,
            Self::OunceAvoirdupois => Property::Mass,
            Self::DramAvoirdupois => Property::Mass,
            Self::ShortHundredweightAvoirdupois => Property::Mass,
            Self::LongHunderdweightAvoirdupois => Property::Mass,
            Self::ShortTonAvoirdupois => Property::Mass,
            Self::LongTonAvoirdupois => Property::Mass,
            Self::StoneAvoirdupois => Property::Mass,
            Self::PennyweightTroy => Property::Mass,
            Self::OunceTroy => Property::Mass,
            Self::PoundTroy => Property::Mass,
            Self::ScrupleApothecaries => Property::Mass,
            Self::DramApothecaries => Property::Mass,
            Self::OunceApothecaries => Property::Mass,
            Self::PoundApothecaries => Property::Mass,
            Self::MetricOunce => Property::Mass,
            Self::Line => Property::Length,
            Self::Point => Property::Length,
            Self::Pica => Property::Length,
            Self::PrintersPoint => Property::Length,
            Self::PrintersPica => Property::Length,
            Self::Pied => Property::Length,
            Self::Pouce => Property::Length,
            Self::Ligne => Property::Length,
            Self::Didot => Property::Length,
            Self::Cicero => Property::Length,
            Self::DegreeFahrenheit => Property::Temperature,
            Self::DegreeRankine => Property::Temperature,
            Self::DegreeReaumur => Property::Temperature,
            Self::CalorieAt15C => Property::Energy,
            Self::CalorieAt20C => Property::Energy,
            Self::MeanCalorie => Property::Energy,
            Self::InternationalTableCalorie => Property::Energy,
            Self::ThermochemicalCalorie => Property::Energy,
            Self::Calorie => Property::Energy,
            Self::NutritionLabelCalories => Property::Energy,
            Self::BritishThermalUnitAt39F => Property::Energy,
            Self::BritishThermalUnitAt59F => Property::Energy,
            Self::BritishThermalUnitAt60F => Property::Energy,
            Self::MeanBritishThermalUnit => Property::Energy,
            Self::InternationalTableBritishThermalUnit => Property::Energy,
            Self::ThermochemicalBritishThermalUnit => Property::Energy,
            Self::BritishThermalUnit => Property::Energy,
            Self::Horsepower => Property::Power,
            Self::Tex => Property::LinearMassDensityOfTextileThread,
            Self::Denier => Property::LinearMassDensityOfTextileThread,
            Self::MeterOfWaterColumn => Property::Pressure,
            Self::MeterOfMercuryColumn => Property::Pressure,
            Self::InchOfWaterColumn => Property::Pressure,
            Self::InchOfMercuryColumn => Property::Pressure,
            Self::PeripheralVascularResistanceUnit => Property::FluidResistance,
            Self::WoodUnit => Property::FluidResistance,
            Self::Diopter => Property::RefractionOfALens,
            Self::PrismDiopter => Property::RefractionOfAPrism,
            Self::PercentOfSlope => Property::Slope,
            Self::MeshInternational => Property::LineicNumber,
            Self::Charriere => Property::GaugeOfCatheters,
            Self::Drop => Property::Volume,
            Self::HounsfieldUnit => Property::XRayAttenuation,
            Self::MetabolicEquivalent => Property::MetabolicCostOfPhysicalActivity,
            Self::HomeopathicPotencyOfDecimalSeriesRetired => Property::HomeopathicPotencyRetired,
            Self::HomeopathicPotencyOfCentesimalSeriesRetired => Property::HomeopathicPotencyRetired,
            Self::HomeopathicPotencyOfMillesimalSeriesRetired => Property::HomeopathicPotencyRetired,
            Self::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Property::HomeopathicPotencyRetired,
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries => Property::HomeopathicPotencyHahnemann,
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries => Property::HomeopathicPotencyHahnemann,
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries => Property::HomeopathicPotencyHahnemann,
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => Property::HomeopathicPotencyHahnemann,
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries => Property::HomeopathicPotencyKorsakov,
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries => Property::HomeopathicPotencyKorsakov,
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries => Property::HomeopathicPotencyKorsakov,
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => Property::HomeopathicPotencyKorsakov,
            Self::Equivalents => Property::AmountOfSubstance,
            Self::Osmole => Property::AmountOfSubstanceDissolvedParticles,
            Self::PH => Property::Acidity,
            Self::GramPercent => Property::MassConcentration,
            Self::SvedbergUnit => Property::SedimentationCoefficient,
            Self::HighPowerField => Property::ViewAreaInMicroscope,
            Self::LowPowerField => Property::ViewAreaInMicroscope,
            Self::Katal => Property::CatalyticActivity,
            Self::Unit => Property::CatalyticActivity,
            Self::InternationalUnit => Property::Arbitrary,
            Self::InternationalUnitSecondary => Property::Arbitrary,
            Self::ArbitraryUnit => Property::Arbitrary,
            Self::UnitedStatesPharmacopeiaUnit => Property::Arbitrary,
            Self::GplUnit => Property::BiologicActivityOfAnticardiolipinIgG,
            Self::MplUnit => Property::BiologicActivityOfAnticardiolipinIgM,
            Self::AplUnit => Property::BiologicActivityOfAnticardiolipinIgA,
            Self::BethesdaUnit => Property::BiologicActivityOfFactorViiiInhibitor,
            Self::AntiFactorXaUnit => Property::BiologicActivityOfFactorXaInhibitorHeparin,
            Self::ToddUnit => Property::BiologicActivityAntistreptolysinO,
            Self::DyeUnit => Property::BiologicActivityOfAmylase,
            Self::SomogyiUnit => Property::BiologicActivityOfAmylase,
            Self::BodanskyUnit => Property::BiologicActivityOfPhosphatase,
            Self::KingArmstrongUnit => Property::BiologicActivityOfPhosphatase,
            Self::KunkelUnit => Property::ArbitraryBiologicActivity,
            Self::MacLaganUnit => Property::ArbitraryBiologicActivity,
            Self::TuberculinUnit => Property::BiologicActivityOfTuberculin,
            Self::CellCultureInfectiousDose => Property::BiologicActivityInfectivityOfAnInfectiousAgentPreparation,
            Self::TissueCultureInfectiousDose => Property::BiologicActivityInfectivityOfAnInfectiousAgentPreparation,
            Self::EmbryoInfectiousDose => Property::BiologicActivityInfectivityOfAnInfectiousAgentPreparation,
            Self::PlaqueFormingUnits => Property::AmountOfAnInfectiousAgent,
            Self::FocusFormingUnits => Property::AmountOfAnInfectiousAgent,
            Self::ColonyFormingUnits => Property::AmountOfAProliferatingOrganism,
            Self::IndexOfReactivity => Property::AmountOfAnAllergenCallibratedThroughInVivoTestingUsingTheStallergenesMethod,
            Self::BioequivalentAllergenUnit => Property::AmountOfAnAllergenCallibratedThroughInVivoTestingBasedOnTheId50ealMethodOfIntradermalDilutionFor50mmSumOfErythemaDiameters,
            Self::AllergenUnit => Property::ProcedureDefinedAmountOfAnAllergenUsingSomeReferenceStandard,
            Self::AllergenUnitForAmbrosiaArtemisiifolia => Property::ProcedureDefinedAmountOfTheMajorAllergenOfRagweed,
            Self::ProteinNitrogenUnit => Property::ProcedureDefinedAmountOfAProteinSubstance,
            Self::LimitOfFlocculation => Property::ProcedureDefinedAmountOfAnAntigenSubstance,
            Self::DAntigenUnit => Property::ProcedureDefinedAmountOfAPoliomyelitisDAntigenSubstance,
            Self::FibrinogenEquivalentUnit => Property::AmountOfFibrinogenBrokenDownIntoTheMeasuredDDimers,
            Self::ElisaUnit => Property::ArbitraryElisaUnit,
            Self::EhrlichUnit => Property::EhrlichUnit,
            Self::Neper => Property::Level,
            Self::Bel => Property::Level,
            Self::BelSoundPressure => Property::PressureLevel,
            Self::BelVolt => Property::ElectricPotentialLevel,
            Self::BelMillivolt => Property::ElectricPotentialLevel,
            Self::BelMicrovolt => Property::ElectricPotentialLevel,
            Self::Bel10Nanovolt => Property::ElectricPotentialLevel,
            Self::BelWatt => Property::PowerLevel,
            Self::BelKilowatt => Property::PowerLevel,
            Self::Stere => Property::Volume,
            Self::Angstrom => Property::Length,
            Self::Barn => Property::ActionArea,
            Self::TechnicalAtmosphere => Property::Pressure,
            Self::Mho => Property::ElectricConductance,
            Self::PoundPerSqareInch => Property::Pressure,
            Self::Circle => Property::PlaneAngle,
            Self::Spere => Property::SolidAngle,
            Self::MetricCarat => Property::Mass,
            Self::CaratOfGoldAlloys => Property::MassFraction,
            Self::Smoot => Property::Length,
            Self::MeterPerSquareSecondsPerSquareRootOfHertz => Property::AmplitudeSpectralDensity,
            Self::BitLogarithmusDualis => Property::AmountOfInformation,
            Self::Bit => Property::AmountOfInformation,
            Self::Byte => Property::AmountOfInformation,
            Self::Baud => Property::SignalTransmissionRate,
        }
    }
}

impl UcumSymbol for Atom {
    fn classification(&self) -> Classification {
        match *self {
            Self::Meter => Classification::Si,
            Self::Second => Classification::Si,
            Self::Gram => Classification::Si,
            Self::Radian => Classification::Si,
            Self::Kelvin => Classification::Si,
            Self::Coulomb => Classification::Si,
            Self::Candela => Classification::Si,
            Self::TheNumberTenForArbitraryPowersStar => Classification::Dimless,
            Self::TheNumberTenForArbitraryPowersCaret => Classification::Dimless,
            Self::TheNumberPi => Classification::Dimless,
            Self::Percent => Classification::Dimless,
            Self::PartsPerThousand => Classification::Dimless,
            Self::PartsPerMillion => Classification::Dimless,
            Self::PartsPerBillion => Classification::Dimless,
            Self::PartsPerTrillion => Classification::Dimless,
            Self::Mole => Classification::Si,
            Self::Steradian => Classification::Si,
            Self::Hertz => Classification::Si,
            Self::Newton => Classification::Si,
            Self::Pascal => Classification::Si,
            Self::Joule => Classification::Si,
            Self::Watt => Classification::Si,
            Self::Ampere => Classification::Si,
            Self::Volt => Classification::Si,
            Self::Farad => Classification::Si,
            Self::Ohm => Classification::Si,
            Self::Siemens => Classification::Si,
            Self::Weber => Classification::Si,
            Self::DegreeCelsius => Classification::Si,
            Self::Tesla => Classification::Si,
            Self::Henry => Classification::Si,
            Self::Lumen => Classification::Si,
            Self::Lux => Classification::Si,
            Self::Becquerel => Classification::Si,
            Self::Gray => Classification::Si,
            Self::Sievert => Classification::Si,
            Self::Gon => Classification::Iso1000,
            Self::Degree => Classification::Iso1000,
            Self::MinuteAngle => Classification::Iso1000,
            Self::SecondAngle => Classification::Iso1000,
            Self::Liter => Classification::Iso1000,
            Self::LiterSecondary => Classification::Iso1000,
            Self::Are => Classification::Iso1000,
            Self::Minute => Classification::Iso1000,
            Self::Hour => Classification::Iso1000,
            Self::Day => Classification::Iso1000,
            Self::TropicalYear => Classification::Iso1000,
            Self::MeanJulianYear => Classification::Iso1000,
            Self::MeanGregorianYear => Classification::Iso1000,
            Self::Year => Classification::Iso1000,
            Self::Week => Classification::Iso1000,
            Self::SynodalMonth => Classification::Iso1000,
            Self::MeanJulianMonth => Classification::Iso1000,
            Self::MeanGregorianMonth => Classification::Iso1000,
            Self::Month => Classification::Iso1000,
            Self::Tonne => Classification::Iso1000,
            Self::Bar => Classification::Iso1000,
            Self::UnifiedAtomicMassUnit => Classification::Iso1000,
            Self::Electronvolt => Classification::Iso1000,
            Self::AstronomicUnit => Classification::Iso1000,
            Self::Parsec => Classification::Iso1000,
            Self::VelocityOfLight => Classification::Const,
            Self::PlanckConstant => Classification::Const,
            Self::BoltzmannConstant => Classification::Const,
            Self::PermittivityOfVacuum => Classification::Const,
            Self::PermeabilityOfVacuum => Classification::Const,
            Self::ElementaryCharge => Classification::Const,
            Self::ElectronMass => Classification::Const,
            Self::ProtonMass => Classification::Const,
            Self::NewtonianConstantOfGravitation => Classification::Const,
            Self::StandardAccelerationOfFreeFall => Classification::Const,
            Self::StandardAtmosphere => Classification::Const,
            Self::LightYear => Classification::Const,
            Self::GramForce => Classification::Const,
            Self::PoundForceAvoirdupois => Classification::Const,
            Self::Kayser => Classification::Cgs,
            Self::Gal => Classification::Cgs,
            Self::Dyne => Classification::Cgs,
            Self::Erg => Classification::Cgs,
            Self::Poise => Classification::Cgs,
            Self::Biot => Classification::Cgs,
            Self::Stokes => Classification::Cgs,
            Self::Maxwell => Classification::Cgs,
            Self::Gauss => Classification::Cgs,
            Self::Oersted => Classification::Cgs,
            Self::Gilbert => Classification::Cgs,
            Self::Stilb => Classification::Cgs,
            Self::Lambert => Classification::Cgs,
            Self::Phot => Classification::Cgs,
            Self::Curie => Classification::Cgs,
            Self::Roentgen => Classification::Cgs,
            Self::RadiationAbsorbedDose => Classification::Cgs,
            Self::RadiationEquivalentMan => Classification::Cgs,
            Self::InchInternational => Classification::Intcust,
            Self::FootInternational => Classification::Intcust,
            Self::YardInternational => Classification::Intcust,
            Self::MileInternational => Classification::Intcust,
            Self::FathomInternational => Classification::Intcust,
            Self::NauticalMileInternational => Classification::Intcust,
            Self::KnotInternational => Classification::Intcust,
            Self::SquareInchInternational => Classification::Intcust,
            Self::SquareFootInternational => Classification::Intcust,
            Self::SquareYardInternational => Classification::Intcust,
            Self::CubicInchInternational => Classification::Intcust,
            Self::CubicFootInternational => Classification::Intcust,
            Self::CubicYardInternational => Classification::Intcust,
            Self::BoardFootInternational => Classification::Intcust,
            Self::CordInternational => Classification::Intcust,
            Self::MilInternational => Classification::Intcust,
            Self::CircularMilInternational => Classification::Intcust,
            Self::HandInternational => Classification::Intcust,
            Self::FootUS => Classification::UsLengths,
            Self::YardUS => Classification::UsLengths,
            Self::InchUS => Classification::UsLengths,
            Self::RodUS => Classification::UsLengths,
            Self::GuntersChainUS => Classification::UsLengths,
            Self::LinkForGuntersChainUS => Classification::UsLengths,
            Self::RamdensChainUS => Classification::UsLengths,
            Self::LinkForRamdensChainUS => Classification::UsLengths,
            Self::FathomUS => Classification::UsLengths,
            Self::FurlongUS => Classification::UsLengths,
            Self::MileUS => Classification::UsLengths,
            Self::AcreUS => Classification::UsLengths,
            Self::SquareRodUS => Classification::UsLengths,
            Self::SquareMileUS => Classification::UsLengths,
            Self::Section => Classification::UsLengths,
            Self::Township => Classification::UsLengths,
            Self::MilUS => Classification::UsLengths,
            Self::InchBritish => Classification::BritLength,
            Self::FootBritish => Classification::BritLength,
            Self::RodBritish => Classification::BritLength,
            Self::GuntersChainBritish => Classification::BritLength,
            Self::LinkForGuntersChainBritish => Classification::BritLength,
            Self::FathomBritish => Classification::BritLength,
            Self::PaceBritish => Classification::BritLength,
            Self::YardBritish => Classification::BritLength,
            Self::MileBritish => Classification::BritLength,
            Self::NauticalMileBritish => Classification::BritLength,
            Self::KnotBritish => Classification::BritLength,
            Self::AcreBritish => Classification::BritLength,
            Self::QueenAnnesWineGallonUS => Classification::UsVolumes,
            Self::BarrelUS => Classification::UsVolumes,
            Self::QuartUS => Classification::UsVolumes,
            Self::PintUS => Classification::UsVolumes,
            Self::GillUS => Classification::UsVolumes,
            Self::FluidOunceUS => Classification::UsVolumes,
            Self::FluidDramUS => Classification::UsVolumes,
            Self::MinimUS => Classification::UsVolumes,
            Self::CordUS => Classification::UsVolumes,
            Self::BushelUS => Classification::UsVolumes,
            Self::HistoricalWinchesterGallon => Classification::UsVolumes,
            Self::PeckUS => Classification::UsVolumes,
            Self::DryQuartUS => Classification::UsVolumes,
            Self::DryPintUS => Classification::UsVolumes,
            Self::TablespoonUS => Classification::UsVolumes,
            Self::TeaspoonUS => Classification::UsVolumes,
            Self::CupUS => Classification::UsVolumes,
            Self::MetricFluidOunce => Classification::UsVolumes,
            Self::MetricCup => Classification::UsVolumes,
            Self::MetricTeaspoon => Classification::UsVolumes,
            Self::MetricTablespoon => Classification::UsVolumes,
            Self::GallonBritish => Classification::BritVolumes,
            Self::PeckBritish => Classification::BritVolumes,
            Self::BushelBritish => Classification::BritVolumes,
            Self::QuartBritish => Classification::BritVolumes,
            Self::PintBritish => Classification::BritVolumes,
            Self::GillBritish => Classification::BritVolumes,
            Self::FluidOunceBritish => Classification::BritVolumes,
            Self::FluidDramBritish => Classification::BritVolumes,
            Self::MinimBritish => Classification::BritVolumes,
            Self::Grain => Classification::Avoirdupois,
            Self::PoundAvoirdupois => Classification::Avoirdupois,
            Self::OunceAvoirdupois => Classification::Avoirdupois,
            Self::DramAvoirdupois => Classification::Avoirdupois,
            Self::ShortHundredweightAvoirdupois => Classification::Avoirdupois,
            Self::LongHunderdweightAvoirdupois => Classification::Avoirdupois,
            Self::ShortTonAvoirdupois => Classification::Avoirdupois,
            Self::LongTonAvoirdupois => Classification::Avoirdupois,
            Self::StoneAvoirdupois => Classification::Avoirdupois,
            Self::PennyweightTroy => Classification::Troy,
            Self::OunceTroy => Classification::Troy,
            Self::PoundTroy => Classification::Troy,
            Self::ScrupleApothecaries => Classification::Apoth,
            Self::DramApothecaries => Classification::Apoth,
            Self::OunceApothecaries => Classification::Apoth,
            Self::PoundApothecaries => Classification::Apoth,
            Self::MetricOunce => Classification::Apoth,
            Self::Line => Classification::Typeset,
            Self::Point => Classification::Typeset,
            Self::Pica => Classification::Typeset,
            Self::PrintersPoint => Classification::Typeset,
            Self::PrintersPica => Classification::Typeset,
            Self::Pied => Classification::Typeset,
            Self::Pouce => Classification::Typeset,
            Self::Ligne => Classification::Typeset,
            Self::Didot => Classification::Typeset,
            Self::Cicero => Classification::Typeset,
            Self::DegreeFahrenheit => Classification::Heat,
            Self::DegreeRankine => Classification::Heat,
            Self::DegreeReaumur => Classification::Heat,
            Self::CalorieAt15C => Classification::Heat,
            Self::CalorieAt20C => Classification::Heat,
            Self::MeanCalorie => Classification::Heat,
            Self::InternationalTableCalorie => Classification::Heat,
            Self::ThermochemicalCalorie => Classification::Heat,
            Self::Calorie => Classification::Heat,
            Self::NutritionLabelCalories => Classification::Heat,
            Self::BritishThermalUnitAt39F => Classification::Heat,
            Self::BritishThermalUnitAt59F => Classification::Heat,
            Self::BritishThermalUnitAt60F => Classification::Heat,
            Self::MeanBritishThermalUnit => Classification::Heat,
            Self::InternationalTableBritishThermalUnit => Classification::Heat,
            Self::ThermochemicalBritishThermalUnit => Classification::Heat,
            Self::BritishThermalUnit => Classification::Heat,
            Self::Horsepower => Classification::Heat,
            Self::Tex => Classification::Heat,
            Self::Denier => Classification::Heat,
            Self::MeterOfWaterColumn => Classification::Clinical,
            Self::MeterOfMercuryColumn => Classification::Clinical,
            Self::InchOfWaterColumn => Classification::Clinical,
            Self::InchOfMercuryColumn => Classification::Clinical,
            Self::PeripheralVascularResistanceUnit => Classification::Clinical,
            Self::WoodUnit => Classification::Clinical,
            Self::Diopter => Classification::Clinical,
            Self::PrismDiopter => Classification::Clinical,
            Self::PercentOfSlope => Classification::Clinical,
            Self::MeshInternational => Classification::Clinical,
            Self::Charriere => Classification::Clinical,
            Self::Drop => Classification::Clinical,
            Self::HounsfieldUnit => Classification::Clinical,
            Self::MetabolicEquivalent => Classification::Clinical,
            Self::HomeopathicPotencyOfDecimalSeriesRetired => Classification::Clinical,
            Self::HomeopathicPotencyOfCentesimalSeriesRetired => Classification::Clinical,
            Self::HomeopathicPotencyOfMillesimalSeriesRetired => Classification::Clinical,
            Self::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Classification::Clinical,
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries => Classification::Clinical,
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries => Classification::Clinical,
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries => Classification::Clinical,
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => {
                Classification::Clinical
            }
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries => Classification::Clinical,
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries => Classification::Clinical,
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries => Classification::Clinical,
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => Classification::Clinical,
            Self::Equivalents => Classification::Chemical,
            Self::Osmole => Classification::Chemical,
            Self::PH => Classification::Chemical,
            Self::GramPercent => Classification::Chemical,
            Self::SvedbergUnit => Classification::Chemical,
            Self::HighPowerField => Classification::Chemical,
            Self::LowPowerField => Classification::Chemical,
            Self::Katal => Classification::Chemical,
            Self::Unit => Classification::Chemical,
            Self::InternationalUnit => Classification::Chemical,
            Self::InternationalUnitSecondary => Classification::Chemical,
            Self::ArbitraryUnit => Classification::Chemical,
            Self::UnitedStatesPharmacopeiaUnit => Classification::Chemical,
            Self::GplUnit => Classification::Chemical,
            Self::MplUnit => Classification::Chemical,
            Self::AplUnit => Classification::Chemical,
            Self::BethesdaUnit => Classification::Chemical,
            Self::AntiFactorXaUnit => Classification::Chemical,
            Self::ToddUnit => Classification::Chemical,
            Self::DyeUnit => Classification::Chemical,
            Self::SomogyiUnit => Classification::Chemical,
            Self::BodanskyUnit => Classification::Chemical,
            Self::KingArmstrongUnit => Classification::Chemical,
            Self::KunkelUnit => Classification::Chemical,
            Self::MacLaganUnit => Classification::Chemical,
            Self::TuberculinUnit => Classification::Chemical,
            Self::CellCultureInfectiousDose => Classification::Chemical,
            Self::TissueCultureInfectiousDose => Classification::Chemical,
            Self::EmbryoInfectiousDose => Classification::Chemical,
            Self::PlaqueFormingUnits => Classification::Chemical,
            Self::FocusFormingUnits => Classification::Chemical,
            Self::ColonyFormingUnits => Classification::Chemical,
            Self::IndexOfReactivity => Classification::Chemical,
            Self::BioequivalentAllergenUnit => Classification::Chemical,
            Self::AllergenUnit => Classification::Chemical,
            Self::AllergenUnitForAmbrosiaArtemisiifolia => Classification::Chemical,
            Self::ProteinNitrogenUnit => Classification::Chemical,
            Self::LimitOfFlocculation => Classification::Chemical,
            Self::DAntigenUnit => Classification::Chemical,
            Self::FibrinogenEquivalentUnit => Classification::Chemical,
            Self::ElisaUnit => Classification::Chemical,
            Self::EhrlichUnit => Classification::Chemical,
            Self::Neper => Classification::Levels,
            Self::Bel => Classification::Levels,
            Self::BelSoundPressure => Classification::Levels,
            Self::BelVolt => Classification::Levels,
            Self::BelMillivolt => Classification::Levels,
            Self::BelMicrovolt => Classification::Levels,
            Self::Bel10Nanovolt => Classification::Levels,
            Self::BelWatt => Classification::Levels,
            Self::BelKilowatt => Classification::Levels,
            Self::Stere => Classification::Misc,
            Self::Angstrom => Classification::Misc,
            Self::Barn => Classification::Misc,
            Self::TechnicalAtmosphere => Classification::Misc,
            Self::Mho => Classification::Misc,
            Self::PoundPerSqareInch => Classification::Misc,
            Self::Circle => Classification::Misc,
            Self::Spere => Classification::Misc,
            Self::MetricCarat => Classification::Misc,
            Self::CaratOfGoldAlloys => Classification::Misc,
            Self::Smoot => Classification::Misc,
            Self::MeterPerSquareSecondsPerSquareRootOfHertz => Classification::Misc,
            Self::BitLogarithmusDualis => Classification::Infotech,
            Self::Bit => Classification::Infotech,
            Self::Byte => Classification::Infotech,
            Self::Baud => Classification::Infotech,
        }
    }

    fn names(&self) -> Vec<&'static str> {
        match *self {
            Self::Meter => vec!["meter"],
            Self::Second => vec!["second"],
            Self::Gram => vec!["gram"],
            Self::Radian => vec!["radian"],
            Self::Kelvin => vec!["kelvin"],
            Self::Coulomb => vec!["coulomb"],
            Self::Candela => vec!["candela"],
            Self::TheNumberTenForArbitraryPowersStar => vec!["the number ten for arbitrary powers"],
            Self::TheNumberTenForArbitraryPowersCaret => {
                vec!["the number ten for arbitrary powers"]
            }
            Self::TheNumberPi => vec!["the number pi"],
            Self::Percent => vec!["percent"],
            Self::PartsPerThousand => vec!["parts per thousand"],
            Self::PartsPerMillion => vec!["parts per million"],
            Self::PartsPerBillion => vec!["parts per billion"],
            Self::PartsPerTrillion => vec!["parts per trillion"],
            Self::Mole => vec!["mole"],
            Self::Steradian => vec!["steradian"],
            Self::Hertz => vec!["hertz"],
            Self::Newton => vec!["newton"],
            Self::Pascal => vec!["pascal"],
            Self::Joule => vec!["joule"],
            Self::Watt => vec!["watt"],
            Self::Ampere => vec!["ampère"],
            Self::Volt => vec!["volt"],
            Self::Farad => vec!["farad"],
            Self::Ohm => vec!["ohm"],
            Self::Siemens => vec!["siemens"],
            Self::Weber => vec!["weber"],
            Self::DegreeCelsius => vec!["degree Celsius"],
            Self::Tesla => vec!["tesla"],
            Self::Henry => vec!["henry"],
            Self::Lumen => vec!["lumen"],
            Self::Lux => vec!["lux"],
            Self::Becquerel => vec!["becquerel"],
            Self::Gray => vec!["gray"],
            Self::Sievert => vec!["sievert"],
            Self::Gon => vec!["gon", "grade"],
            Self::Degree => vec!["degree"],
            Self::MinuteAngle => vec!["minute"],
            Self::SecondAngle => vec!["second"],
            Self::Liter => vec!["liter"],
            Self::LiterSecondary => vec!["liter"],
            Self::Are => vec!["are"],
            Self::Minute => vec!["minute"],
            Self::Hour => vec!["hour"],
            Self::Day => vec!["day"],
            Self::TropicalYear => vec!["tropical year"],
            Self::MeanJulianYear => vec!["mean Julian year"],
            Self::MeanGregorianYear => vec!["mean Gregorian year"],
            Self::Year => vec!["year"],
            Self::Week => vec!["week"],
            Self::SynodalMonth => vec!["synodal month"],
            Self::MeanJulianMonth => vec!["mean Julian month"],
            Self::MeanGregorianMonth => vec!["mean Gregorian month"],
            Self::Month => vec!["month"],
            Self::Tonne => vec!["tonne"],
            Self::Bar => vec!["bar"],
            Self::UnifiedAtomicMassUnit => vec!["unified atomic mass unit"],
            Self::Electronvolt => vec!["electronvolt"],
            Self::AstronomicUnit => vec!["astronomic unit"],
            Self::Parsec => vec!["parsec"],
            Self::VelocityOfLight => vec!["velocity of light"],
            Self::PlanckConstant => vec!["Planck constant"],
            Self::BoltzmannConstant => vec!["Boltzmann constant"],
            Self::PermittivityOfVacuum => vec!["permittivity of vacuum"],
            Self::PermeabilityOfVacuum => vec!["permeability of vacuum"],
            Self::ElementaryCharge => vec!["elementary charge"],
            Self::ElectronMass => vec!["electron mass"],
            Self::ProtonMass => vec!["proton mass"],
            Self::NewtonianConstantOfGravitation => vec!["Newtonian constant of gravitation"],
            Self::StandardAccelerationOfFreeFall => vec!["standard acceleration of free fall"],
            Self::StandardAtmosphere => vec!["standard atmosphere"],
            Self::LightYear => vec!["light-year"],
            Self::GramForce => vec!["gram-force"],
            Self::PoundForceAvoirdupois => vec!["pound force"],
            Self::Kayser => vec!["Kayser"],
            Self::Gal => vec!["Gal"],
            Self::Dyne => vec!["dyne"],
            Self::Erg => vec!["erg"],
            Self::Poise => vec!["Poise"],
            Self::Biot => vec!["Biot"],
            Self::Stokes => vec!["Stokes"],
            Self::Maxwell => vec!["Maxwell"],
            Self::Gauss => vec!["Gauss"],
            Self::Oersted => vec!["Oersted"],
            Self::Gilbert => vec!["Gilbert"],
            Self::Stilb => vec!["stilb"],
            Self::Lambert => vec!["Lambert"],
            Self::Phot => vec!["phot"],
            Self::Curie => vec!["Curie"],
            Self::Roentgen => vec!["Roentgen"],
            Self::RadiationAbsorbedDose => vec!["radiation absorbed dose"],
            Self::RadiationEquivalentMan => vec!["radiation equivalent man"],
            Self::InchInternational => vec!["inch"],
            Self::FootInternational => vec!["foot"],
            Self::YardInternational => vec!["yard"],
            Self::MileInternational => vec!["mile"],
            Self::FathomInternational => vec!["fathom"],
            Self::NauticalMileInternational => vec!["nautical mile"],
            Self::KnotInternational => vec!["knot"],
            Self::SquareInchInternational => vec!["square inch"],
            Self::SquareFootInternational => vec!["square foot"],
            Self::SquareYardInternational => vec!["square yard"],
            Self::CubicInchInternational => vec!["cubic inch"],
            Self::CubicFootInternational => vec!["cubic foot"],
            Self::CubicYardInternational => vec!["cubic yard"],
            Self::BoardFootInternational => vec!["board foot"],
            Self::CordInternational => vec!["cord"],
            Self::MilInternational => vec!["mil"],
            Self::CircularMilInternational => vec!["circular mil"],
            Self::HandInternational => vec!["hand"],
            Self::FootUS => vec!["foot"],
            Self::YardUS => vec!["yard"],
            Self::InchUS => vec!["inch"],
            Self::RodUS => vec!["rod"],
            Self::GuntersChainUS => vec!["Gunter's chain", "Surveyor's chain"],
            Self::LinkForGuntersChainUS => vec!["link for Gunter's chain"],
            Self::RamdensChainUS => vec!["Ramden's chain", "Engineer's chain"],
            Self::LinkForRamdensChainUS => vec!["link for Ramden's chain"],
            Self::FathomUS => vec!["fathom"],
            Self::FurlongUS => vec!["furlong"],
            Self::MileUS => vec!["mile"],
            Self::AcreUS => vec!["acre"],
            Self::SquareRodUS => vec!["square rod"],
            Self::SquareMileUS => vec!["square mile"],
            Self::Section => vec!["section"],
            Self::Township => vec!["township"],
            Self::MilUS => vec!["mil"],
            Self::InchBritish => vec!["inch"],
            Self::FootBritish => vec!["foot"],
            Self::RodBritish => vec!["rod"],
            Self::GuntersChainBritish => vec!["Gunter's chain"],
            Self::LinkForGuntersChainBritish => vec!["link for Gunter's chain"],
            Self::FathomBritish => vec!["fathom"],
            Self::PaceBritish => vec!["pace"],
            Self::YardBritish => vec!["yard"],
            Self::MileBritish => vec!["mile"],
            Self::NauticalMileBritish => vec!["nautical mile"],
            Self::KnotBritish => vec!["knot"],
            Self::AcreBritish => vec!["acre"],
            Self::QueenAnnesWineGallonUS => vec!["Queen Anne's wine gallon"],
            Self::BarrelUS => vec!["barrel"],
            Self::QuartUS => vec!["quart"],
            Self::PintUS => vec!["pint"],
            Self::GillUS => vec!["gill"],
            Self::FluidOunceUS => vec!["fluid ounce"],
            Self::FluidDramUS => vec!["fluid dram"],
            Self::MinimUS => vec!["minim"],
            Self::CordUS => vec!["cord"],
            Self::BushelUS => vec!["bushel"],
            Self::HistoricalWinchesterGallon => vec!["historical winchester gallon"],
            Self::PeckUS => vec!["peck"],
            Self::DryQuartUS => vec!["dry quart"],
            Self::DryPintUS => vec!["dry pint"],
            Self::TablespoonUS => vec!["tablespoon"],
            Self::TeaspoonUS => vec!["teaspoon"],
            Self::CupUS => vec!["cup"],
            Self::MetricFluidOunce => vec!["metric fluid ounce"],
            Self::MetricCup => vec!["metric cup"],
            Self::MetricTeaspoon => vec!["metric teaspoon"],
            Self::MetricTablespoon => vec!["metric tablespoon"],
            Self::GallonBritish => vec!["gallon"],
            Self::PeckBritish => vec!["peck"],
            Self::BushelBritish => vec!["bushel"],
            Self::QuartBritish => vec!["quart"],
            Self::PintBritish => vec!["pint"],
            Self::GillBritish => vec!["gill"],
            Self::FluidOunceBritish => vec!["fluid ounce"],
            Self::FluidDramBritish => vec!["fluid dram"],
            Self::MinimBritish => vec!["minim"],
            Self::Grain => vec!["grain"],
            Self::PoundAvoirdupois => vec!["pound"],
            Self::OunceAvoirdupois => vec!["ounce"],
            Self::DramAvoirdupois => vec!["dram"],
            Self::ShortHundredweightAvoirdupois => {
                vec!["short hundredweight", "U.S. hundredweight"]
            }
            Self::LongHunderdweightAvoirdupois => {
                vec!["long hunderdweight", "British hundredweight"]
            }
            Self::ShortTonAvoirdupois => vec!["short ton", "U.S. ton"],
            Self::LongTonAvoirdupois => vec!["long ton", "British ton"],
            Self::StoneAvoirdupois => vec!["stone", "British stone"],
            Self::PennyweightTroy => vec!["pennyweight"],
            Self::OunceTroy => vec!["ounce"],
            Self::PoundTroy => vec!["pound"],
            Self::ScrupleApothecaries => vec!["scruple"],
            Self::DramApothecaries => vec!["dram", "drachm"],
            Self::OunceApothecaries => vec!["ounce"],
            Self::PoundApothecaries => vec!["pound"],
            Self::MetricOunce => vec!["metric ounce"],
            Self::Line => vec!["line"],
            Self::Point => vec!["point"],
            Self::Pica => vec!["pica"],
            Self::PrintersPoint => vec!["Printer's point"],
            Self::PrintersPica => vec!["Printer's pica"],
            Self::Pied => vec!["pied", "French foot"],
            Self::Pouce => vec!["pouce", "French inch"],
            Self::Ligne => vec!["ligne", "French line"],
            Self::Didot => vec!["didot", "Didot's point"],
            Self::Cicero => vec!["cicero", "Didot's pica"],
            Self::DegreeFahrenheit => vec!["degree Fahrenheit"],
            Self::DegreeRankine => vec!["degree Rankine"],
            Self::DegreeReaumur => vec!["degree Réaumur"],
            Self::CalorieAt15C => vec!["calorie at 15 °C"],
            Self::CalorieAt20C => vec!["calorie at 20 °C"],
            Self::MeanCalorie => vec!["mean calorie"],
            Self::InternationalTableCalorie => vec!["international table calorie"],
            Self::ThermochemicalCalorie => vec!["thermochemical calorie"],
            Self::Calorie => vec!["calorie"],
            Self::NutritionLabelCalories => vec!["nutrition label Calories"],
            Self::BritishThermalUnitAt39F => vec!["British thermal unit at 39 °F"],
            Self::BritishThermalUnitAt59F => vec!["British thermal unit at 59 °F"],
            Self::BritishThermalUnitAt60F => vec!["British thermal unit at 60 °F"],
            Self::MeanBritishThermalUnit => vec!["mean British thermal unit"],
            Self::InternationalTableBritishThermalUnit => {
                vec!["international table British thermal unit"]
            }
            Self::ThermochemicalBritishThermalUnit => vec!["thermochemical British thermal unit"],
            Self::BritishThermalUnit => vec!["British thermal unit"],
            Self::Horsepower => vec!["horsepower"],
            Self::Tex => vec!["tex"],
            Self::Denier => vec!["Denier"],
            Self::MeterOfWaterColumn => vec!["meter of water column"],
            Self::MeterOfMercuryColumn => vec!["meter of mercury column"],
            Self::InchOfWaterColumn => vec!["inch of water column"],
            Self::InchOfMercuryColumn => vec!["inch of mercury column"],
            Self::PeripheralVascularResistanceUnit => vec!["peripheral vascular resistance unit"],
            Self::WoodUnit => vec!["Wood unit"],
            Self::Diopter => vec!["diopter"],
            Self::PrismDiopter => vec!["prism diopter"],
            Self::PercentOfSlope => vec!["percent of slope"],
            Self::MeshInternational => vec!["mesh"],
            Self::Charriere => vec!["Charrière", "french"],
            Self::Drop => vec!["drop"],
            Self::HounsfieldUnit => vec!["Hounsfield unit"],
            Self::MetabolicEquivalent => vec!["metabolic equivalent"],
            Self::HomeopathicPotencyOfDecimalSeriesRetired => {
                vec!["homeopathic potency of decimal series (retired)"]
            }
            Self::HomeopathicPotencyOfCentesimalSeriesRetired => {
                vec!["homeopathic potency of centesimal series (retired)"]
            }
            Self::HomeopathicPotencyOfMillesimalSeriesRetired => {
                vec!["homeopathic potency of millesimal series (retired)"]
            }
            Self::HomeopathicPotencyOfQuintamillesimalSeriesRetired => {
                vec!["homeopathic potency of quintamillesimal series (retired)"]
            }
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries => {
                vec!["homeopathic potency of decimal hahnemannian series"]
            }
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries => {
                vec!["homeopathic potency of centesimal hahnemannian series"]
            }
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries => {
                vec!["homeopathic potency of millesimal hahnemannian series"]
            }
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => {
                vec!["homeopathic potency of quintamillesimal hahnemannian series"]
            }
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries => {
                vec!["homeopathic potency of decimal korsakovian series"]
            }
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries => {
                vec!["homeopathic potency of centesimal korsakovian series"]
            }
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries => {
                vec!["homeopathic potency of millesimal korsakovian series"]
            }
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => {
                vec!["homeopathic potency of quintamillesimal korsakovian series"]
            }
            Self::Equivalents => vec!["equivalents"],
            Self::Osmole => vec!["osmole"],
            Self::PH => vec!["pH"],
            Self::GramPercent => vec!["gram percent"],
            Self::SvedbergUnit => vec!["Svedberg unit"],
            Self::HighPowerField => vec!["high power field"],
            Self::LowPowerField => vec!["low power field"],
            Self::Katal => vec!["katal"],
            Self::Unit => vec!["Unit"],
            Self::InternationalUnit => vec!["international unit"],
            Self::InternationalUnitSecondary => vec!["international unit"],
            Self::ArbitraryUnit => vec!["arbitrary unit"],
            Self::UnitedStatesPharmacopeiaUnit => vec!["United States Pharmacopeia unit"],
            Self::GplUnit => vec!["GPL unit"],
            Self::MplUnit => vec!["MPL unit"],
            Self::AplUnit => vec!["APL unit"],
            Self::BethesdaUnit => vec!["Bethesda unit"],
            Self::AntiFactorXaUnit => vec!["anti factor Xa unit"],
            Self::ToddUnit => vec!["Todd unit"],
            Self::DyeUnit => vec!["Dye unit"],
            Self::SomogyiUnit => vec!["Somogyi unit"],
            Self::BodanskyUnit => vec!["Bodansky unit"],
            Self::KingArmstrongUnit => vec!["King-Armstrong unit"],
            Self::KunkelUnit => vec!["Kunkel unit"],
            Self::MacLaganUnit => vec!["Mac Lagan unit"],
            Self::TuberculinUnit => vec!["tuberculin unit"],
            Self::CellCultureInfectiousDose => vec!["50% cell culture infectious dose"],
            Self::TissueCultureInfectiousDose => vec!["50% tissue culture infectious dose"],
            Self::EmbryoInfectiousDose => vec!["50% embryo infectious dose"],
            Self::PlaqueFormingUnits => vec!["plaque forming units"],
            Self::FocusFormingUnits => vec!["focus forming units"],
            Self::ColonyFormingUnits => vec!["colony forming units"],
            Self::IndexOfReactivity => vec!["index of reactivity"],
            Self::BioequivalentAllergenUnit => vec!["bioequivalent allergen unit"],
            Self::AllergenUnit => vec!["allergen unit"],
            Self::AllergenUnitForAmbrosiaArtemisiifolia => {
                vec!["allergen unit for Ambrosia artemisiifolia"]
            }
            Self::ProteinNitrogenUnit => vec!["protein nitrogen unit"],
            Self::LimitOfFlocculation => vec!["Limit of flocculation"],
            Self::DAntigenUnit => vec!["D-antigen unit"],
            Self::FibrinogenEquivalentUnit => vec!["fibrinogen equivalent unit"],
            Self::ElisaUnit => vec!["ELISA unit"],
            Self::EhrlichUnit => vec!["Ehrlich unit"],
            Self::Neper => vec!["neper"],
            Self::Bel => vec!["bel"],
            Self::BelSoundPressure => vec!["bel sound pressure"],
            Self::BelVolt => vec!["bel volt"],
            Self::BelMillivolt => vec!["bel millivolt"],
            Self::BelMicrovolt => vec!["bel microvolt"],
            Self::Bel10Nanovolt => vec!["bel 10 nanovolt"],
            Self::BelWatt => vec!["bel watt"],
            Self::BelKilowatt => vec!["bel kilowatt"],
            Self::Stere => vec!["stere"],
            Self::Angstrom => vec!["Ångström"],
            Self::Barn => vec!["barn"],
            Self::TechnicalAtmosphere => vec!["technical atmosphere"],
            Self::Mho => vec!["mho"],
            Self::PoundPerSqareInch => vec!["pound per sqare inch"],
            Self::Circle => vec!["circle"],
            Self::Spere => vec!["spere"],
            Self::MetricCarat => vec!["metric carat"],
            Self::CaratOfGoldAlloys => vec!["carat of gold alloys"],
            Self::Smoot => vec!["Smoot"],
            Self::MeterPerSquareSecondsPerSquareRootOfHertz => {
                vec!["meter per square seconds per square root of hertz"]
            }
            Self::BitLogarithmusDualis => vec!["bit"],
            Self::Bit => vec!["bit"],
            Self::Byte => vec!["byte"],
            Self::Baud => vec!["baud"],
        }
    }

    fn primary_code(&self) -> &'static str {
        match *self {
            Self::Meter => "m",
            Self::Second => "s",
            Self::Gram => "g",
            Self::Radian => "rad",
            Self::Kelvin => "K",
            Self::Coulomb => "C",
            Self::Candela => "cd",
            Self::TheNumberTenForArbitraryPowersStar => "10*",
            Self::TheNumberTenForArbitraryPowersCaret => "10^",
            Self::TheNumberPi => "[pi]",
            Self::Percent => "%",
            Self::PartsPerThousand => "[ppth]",
            Self::PartsPerMillion => "[ppm]",
            Self::PartsPerBillion => "[ppb]",
            Self::PartsPerTrillion => "[pptr]",
            Self::Mole => "mol",
            Self::Steradian => "sr",
            Self::Hertz => "Hz",
            Self::Newton => "N",
            Self::Pascal => "Pa",
            Self::Joule => "J",
            Self::Watt => "W",
            Self::Ampere => "A",
            Self::Volt => "V",
            Self::Farad => "F",
            Self::Ohm => "Ohm",
            Self::Siemens => "S",
            Self::Weber => "Wb",
            Self::DegreeCelsius => "Cel",
            Self::Tesla => "T",
            Self::Henry => "H",
            Self::Lumen => "lm",
            Self::Lux => "lx",
            Self::Becquerel => "Bq",
            Self::Gray => "Gy",
            Self::Sievert => "Sv",
            Self::Gon => "gon",
            Self::Degree => "deg",
            Self::MinuteAngle => "'",
            Self::SecondAngle => "''",
            Self::Liter => "l",
            Self::LiterSecondary => "L",
            Self::Are => "ar",
            Self::Minute => "min",
            Self::Hour => "h",
            Self::Day => "d",
            Self::TropicalYear => "a_t",
            Self::MeanJulianYear => "a_j",
            Self::MeanGregorianYear => "a_g",
            Self::Year => "a",
            Self::Week => "wk",
            Self::SynodalMonth => "mo_s",
            Self::MeanJulianMonth => "mo_j",
            Self::MeanGregorianMonth => "mo_g",
            Self::Month => "mo",
            Self::Tonne => "t",
            Self::Bar => "bar",
            Self::UnifiedAtomicMassUnit => "u",
            Self::Electronvolt => "eV",
            Self::AstronomicUnit => "AU",
            Self::Parsec => "pc",
            Self::VelocityOfLight => "[c]",
            Self::PlanckConstant => "[h]",
            Self::BoltzmannConstant => "[k]",
            Self::PermittivityOfVacuum => "[eps_0]",
            Self::PermeabilityOfVacuum => "[mu_0]",
            Self::ElementaryCharge => "[e]",
            Self::ElectronMass => "[m_e]",
            Self::ProtonMass => "[m_p]",
            Self::NewtonianConstantOfGravitation => "[G]",
            Self::StandardAccelerationOfFreeFall => "[g]",
            Self::StandardAtmosphere => "atm",
            Self::LightYear => "[ly]",
            Self::GramForce => "gf",
            Self::PoundForceAvoirdupois => "[lbf_av]",
            Self::Kayser => "Ky",
            Self::Gal => "Gal",
            Self::Dyne => "dyn",
            Self::Erg => "erg",
            Self::Poise => "P",
            Self::Biot => "Bi",
            Self::Stokes => "St",
            Self::Maxwell => "Mx",
            Self::Gauss => "G",
            Self::Oersted => "Oe",
            Self::Gilbert => "Gb",
            Self::Stilb => "sb",
            Self::Lambert => "Lmb",
            Self::Phot => "ph",
            Self::Curie => "Ci",
            Self::Roentgen => "R",
            Self::RadiationAbsorbedDose => "RAD",
            Self::RadiationEquivalentMan => "REM",
            Self::InchInternational => "[in_i]",
            Self::FootInternational => "[ft_i]",
            Self::YardInternational => "[yd_i]",
            Self::MileInternational => "[mi_i]",
            Self::FathomInternational => "[fth_i]",
            Self::NauticalMileInternational => "[nmi_i]",
            Self::KnotInternational => "[kn_i]",
            Self::SquareInchInternational => "[sin_i]",
            Self::SquareFootInternational => "[sft_i]",
            Self::SquareYardInternational => "[syd_i]",
            Self::CubicInchInternational => "[cin_i]",
            Self::CubicFootInternational => "[cft_i]",
            Self::CubicYardInternational => "[cyd_i]",
            Self::BoardFootInternational => "[bf_i]",
            Self::CordInternational => "[cr_i]",
            Self::MilInternational => "[mil_i]",
            Self::CircularMilInternational => "[cml_i]",
            Self::HandInternational => "[hd_i]",
            Self::FootUS => "[ft_us]",
            Self::YardUS => "[yd_us]",
            Self::InchUS => "[in_us]",
            Self::RodUS => "[rd_us]",
            Self::GuntersChainUS => "[ch_us]",
            Self::LinkForGuntersChainUS => "[lk_us]",
            Self::RamdensChainUS => "[rch_us]",
            Self::LinkForRamdensChainUS => "[rlk_us]",
            Self::FathomUS => "[fth_us]",
            Self::FurlongUS => "[fur_us]",
            Self::MileUS => "[mi_us]",
            Self::AcreUS => "[acr_us]",
            Self::SquareRodUS => "[srd_us]",
            Self::SquareMileUS => "[smi_us]",
            Self::Section => "[sct]",
            Self::Township => "[twp]",
            Self::MilUS => "[mil_us]",
            Self::InchBritish => "[in_br]",
            Self::FootBritish => "[ft_br]",
            Self::RodBritish => "[rd_br]",
            Self::GuntersChainBritish => "[ch_br]",
            Self::LinkForGuntersChainBritish => "[lk_br]",
            Self::FathomBritish => "[fth_br]",
            Self::PaceBritish => "[pc_br]",
            Self::YardBritish => "[yd_br]",
            Self::MileBritish => "[mi_br]",
            Self::NauticalMileBritish => "[nmi_br]",
            Self::KnotBritish => "[kn_br]",
            Self::AcreBritish => "[acr_br]",
            Self::QueenAnnesWineGallonUS => "[gal_us]",
            Self::BarrelUS => "[bbl_us]",
            Self::QuartUS => "[qt_us]",
            Self::PintUS => "[pt_us]",
            Self::GillUS => "[gil_us]",
            Self::FluidOunceUS => "[foz_us]",
            Self::FluidDramUS => "[fdr_us]",
            Self::MinimUS => "[min_us]",
            Self::CordUS => "[crd_us]",
            Self::BushelUS => "[bu_us]",
            Self::HistoricalWinchesterGallon => "[gal_wi]",
            Self::PeckUS => "[pk_us]",
            Self::DryQuartUS => "[dqt_us]",
            Self::DryPintUS => "[dpt_us]",
            Self::TablespoonUS => "[tbs_us]",
            Self::TeaspoonUS => "[tsp_us]",
            Self::CupUS => "[cup_us]",
            Self::MetricFluidOunce => "[foz_m]",
            Self::MetricCup => "[cup_m]",
            Self::MetricTeaspoon => "[tsp_m]",
            Self::MetricTablespoon => "[tbs_m]",
            Self::GallonBritish => "[gal_br]",
            Self::PeckBritish => "[pk_br]",
            Self::BushelBritish => "[bu_br]",
            Self::QuartBritish => "[qt_br]",
            Self::PintBritish => "[pt_br]",
            Self::GillBritish => "[gil_br]",
            Self::FluidOunceBritish => "[foz_br]",
            Self::FluidDramBritish => "[fdr_br]",
            Self::MinimBritish => "[min_br]",
            Self::Grain => "[gr]",
            Self::PoundAvoirdupois => "[lb_av]",
            Self::OunceAvoirdupois => "[oz_av]",
            Self::DramAvoirdupois => "[dr_av]",
            Self::ShortHundredweightAvoirdupois => "[scwt_av]",
            Self::LongHunderdweightAvoirdupois => "[lcwt_av]",
            Self::ShortTonAvoirdupois => "[ston_av]",
            Self::LongTonAvoirdupois => "[lton_av]",
            Self::StoneAvoirdupois => "[stone_av]",
            Self::PennyweightTroy => "[pwt_tr]",
            Self::OunceTroy => "[oz_tr]",
            Self::PoundTroy => "[lb_tr]",
            Self::ScrupleApothecaries => "[sc_ap]",
            Self::DramApothecaries => "[dr_ap]",
            Self::OunceApothecaries => "[oz_ap]",
            Self::PoundApothecaries => "[lb_ap]",
            Self::MetricOunce => "[oz_m]",
            Self::Line => "[lne]",
            Self::Point => "[pnt]",
            Self::Pica => "[pca]",
            Self::PrintersPoint => "[pnt_pr]",
            Self::PrintersPica => "[pca_pr]",
            Self::Pied => "[pied]",
            Self::Pouce => "[pouce]",
            Self::Ligne => "[ligne]",
            Self::Didot => "[didot]",
            Self::Cicero => "[cicero]",
            Self::DegreeFahrenheit => "[degF]",
            Self::DegreeRankine => "[degR]",
            Self::DegreeReaumur => "[degRe]",
            Self::CalorieAt15C => "cal_[15]",
            Self::CalorieAt20C => "cal_[20]",
            Self::MeanCalorie => "cal_m",
            Self::InternationalTableCalorie => "cal_IT",
            Self::ThermochemicalCalorie => "cal_th",
            Self::Calorie => "cal",
            Self::NutritionLabelCalories => "[Cal]",
            Self::BritishThermalUnitAt39F => "[Btu_39]",
            Self::BritishThermalUnitAt59F => "[Btu_59]",
            Self::BritishThermalUnitAt60F => "[Btu_60]",
            Self::MeanBritishThermalUnit => "[Btu_m]",
            Self::InternationalTableBritishThermalUnit => "[Btu_IT]",
            Self::ThermochemicalBritishThermalUnit => "[Btu_th]",
            Self::BritishThermalUnit => "[Btu]",
            Self::Horsepower => "[HP]",
            Self::Tex => "tex",
            Self::Denier => "[den]",
            Self::MeterOfWaterColumn => "m[H2O]",
            Self::MeterOfMercuryColumn => "m[Hg]",
            Self::InchOfWaterColumn => "[in_i'H2O]",
            Self::InchOfMercuryColumn => "[in_i'Hg]",
            Self::PeripheralVascularResistanceUnit => "[PRU]",
            Self::WoodUnit => "[wood'U]",
            Self::Diopter => "[diop]",
            Self::PrismDiopter => "[p'diop]",
            Self::PercentOfSlope => "%[slope]",
            Self::MeshInternational => "[mesh_i]",
            Self::Charriere => "[Ch]",
            Self::Drop => "[drp]",
            Self::HounsfieldUnit => "[hnsf'U]",
            Self::MetabolicEquivalent => "[MET]",
            Self::HomeopathicPotencyOfDecimalSeriesRetired => "[hp'_X]",
            Self::HomeopathicPotencyOfCentesimalSeriesRetired => "[hp'_C]",
            Self::HomeopathicPotencyOfMillesimalSeriesRetired => "[hp'_M]",
            Self::HomeopathicPotencyOfQuintamillesimalSeriesRetired => "[hp'_Q]",
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries => "[hp_X]",
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries => "[hp_C]",
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries => "[hp_M]",
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => "[hp_Q]",
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries => "[kp_X]",
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries => "[kp_C]",
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries => "[kp_M]",
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => "[kp_Q]",
            Self::Equivalents => "eq",
            Self::Osmole => "osm",
            Self::PH => "[pH]",
            Self::GramPercent => "g%",
            Self::SvedbergUnit => "[S]",
            Self::HighPowerField => "[HPF]",
            Self::LowPowerField => "[LPF]",
            Self::Katal => "kat",
            Self::Unit => "U",
            Self::InternationalUnit => "[iU]",
            Self::InternationalUnitSecondary => "[IU]",
            Self::ArbitraryUnit => "[arb'U]",
            Self::UnitedStatesPharmacopeiaUnit => "[USP'U]",
            Self::GplUnit => "[GPL'U]",
            Self::MplUnit => "[MPL'U]",
            Self::AplUnit => "[APL'U]",
            Self::BethesdaUnit => "[beth'U]",
            Self::AntiFactorXaUnit => "[anti'Xa'U]",
            Self::ToddUnit => "[todd'U]",
            Self::DyeUnit => "[dye'U]",
            Self::SomogyiUnit => "[smgy'U]",
            Self::BodanskyUnit => "[bdsk'U]",
            Self::KingArmstrongUnit => "[ka'U]",
            Self::KunkelUnit => "[knk'U]",
            Self::MacLaganUnit => "[mclg'U]",
            Self::TuberculinUnit => "[tb'U]",
            Self::CellCultureInfectiousDose => "[CCID_50]",
            Self::TissueCultureInfectiousDose => "[TCID_50]",
            Self::EmbryoInfectiousDose => "[EID_50]",
            Self::PlaqueFormingUnits => "[PFU]",
            Self::FocusFormingUnits => "[FFU]",
            Self::ColonyFormingUnits => "[CFU]",
            Self::IndexOfReactivity => "[IR]",
            Self::BioequivalentAllergenUnit => "[BAU]",
            Self::AllergenUnit => "[AU]",
            Self::AllergenUnitForAmbrosiaArtemisiifolia => "[Amb'a'1'U]",
            Self::ProteinNitrogenUnit => "[PNU]",
            Self::LimitOfFlocculation => "[Lf]",
            Self::DAntigenUnit => "[D'ag'U]",
            Self::FibrinogenEquivalentUnit => "[FEU]",
            Self::ElisaUnit => "[ELU]",
            Self::EhrlichUnit => "[EU]",
            Self::Neper => "Np",
            Self::Bel => "B",
            Self::BelSoundPressure => "B[SPL]",
            Self::BelVolt => "B[V]",
            Self::BelMillivolt => "B[mV]",
            Self::BelMicrovolt => "B[uV]",
            Self::Bel10Nanovolt => "B[10.nV]",
            Self::BelWatt => "B[W]",
            Self::BelKilowatt => "B[kW]",
            Self::Stere => "st",
            Self::Angstrom => "Ao",
            Self::Barn => "b",
            Self::TechnicalAtmosphere => "att",
            Self::Mho => "mho",
            Self::PoundPerSqareInch => "[psi]",
            Self::Circle => "circ",
            Self::Spere => "sph",
            Self::MetricCarat => "[car_m]",
            Self::CaratOfGoldAlloys => "[car_Au]",
            Self::Smoot => "[smoot]",
            Self::MeterPerSquareSecondsPerSquareRootOfHertz => "[m/s2/Hz^(1/2)]",
            Self::BitLogarithmusDualis => "bit_s",
            Self::Bit => "bit",
            Self::Byte => "By",
            Self::Baud => "Bd",
        }
    }

    fn print_symbol(&self) -> Option<&'static str> {
        match *self {
            Self::Meter => Some("m"),
            Self::Second => Some("s"),
            Self::Gram => Some("g"),
            Self::Radian => Some("rad"),
            Self::Kelvin => Some("K"),
            Self::Coulomb => Some("C"),
            Self::Candela => Some("cd"),
            Self::TheNumberTenForArbitraryPowersStar => Some("10"),
            Self::TheNumberTenForArbitraryPowersCaret => Some("10"),
            Self::TheNumberPi => Some("π"),
            Self::Percent => Some("%"),
            Self::PartsPerThousand => Some("ppth"),
            Self::PartsPerMillion => Some("ppm"),
            Self::PartsPerBillion => Some("ppb"),
            Self::PartsPerTrillion => Some("pptr"),
            Self::Mole => Some("mol"),
            Self::Steradian => Some("sr"),
            Self::Hertz => Some("Hz"),
            Self::Newton => Some("N"),
            Self::Pascal => Some("Pa"),
            Self::Joule => Some("J"),
            Self::Watt => Some("W"),
            Self::Ampere => Some("A"),
            Self::Volt => Some("V"),
            Self::Farad => Some("F"),
            Self::Ohm => Some("Ω"),
            Self::Siemens => Some("S"),
            Self::Weber => Some("Wb"),
            Self::DegreeCelsius => Some("°C"),
            Self::Tesla => Some("T"),
            Self::Henry => Some("H"),
            Self::Lumen => Some("lm"),
            Self::Lux => Some("lx"),
            Self::Becquerel => Some("Bq"),
            Self::Gray => Some("Gy"),
            Self::Sievert => Some("Sv"),
            Self::Gon => Some("□<sup>g</sup>"),
            Self::Degree => Some("°"),
            Self::MinuteAngle => Some("'"),
            Self::SecondAngle => Some("''"),
            Self::Liter => Some("l"),
            Self::LiterSecondary => Some("L"),
            Self::Are => Some("a"),
            Self::Minute => Some("min"),
            Self::Hour => Some("h"),
            Self::Day => Some("d"),
            Self::TropicalYear => Some("a<sub>t</sub>"),
            Self::MeanJulianYear => Some("a<sub>j</sub>"),
            Self::MeanGregorianYear => Some("a<sub>g</sub>"),
            Self::Year => Some("a"),
            Self::Week => Some("wk"),
            Self::SynodalMonth => Some("mo<sub>s</sub>"),
            Self::MeanJulianMonth => Some("mo<sub>j</sub>"),
            Self::MeanGregorianMonth => Some("mo<sub>g</sub>"),
            Self::Month => Some("mo"),
            Self::Tonne => Some("t"),
            Self::Bar => Some("bar"),
            Self::UnifiedAtomicMassUnit => Some("u"),
            Self::Electronvolt => Some("eV"),
            Self::AstronomicUnit => Some("AU"),
            Self::Parsec => Some("pc"),
            Self::VelocityOfLight => Some("<i>c</i>"),
            Self::PlanckConstant => Some("<i>h</i>"),
            Self::BoltzmannConstant => Some("<i>k</i>"),
            Self::PermittivityOfVacuum => Some("<i>ε<sub><r>0</r></sub></i>"),
            Self::PermeabilityOfVacuum => Some("<i>μ<sub><r>0</r></sub></i>"),
            Self::ElementaryCharge => Some("<i>e</i>"),
            Self::ElectronMass => Some("<i>m<sub><r>e</r></sub></i>"),
            Self::ProtonMass => Some("<i>m<sub><r>p</r></sub></i>"),
            Self::NewtonianConstantOfGravitation => Some("<i>G</i>"),
            Self::StandardAccelerationOfFreeFall => Some("<i>g<sub>n</sub></i>"),
            Self::StandardAtmosphere => Some("atm"),
            Self::LightYear => Some("l.y."),
            Self::GramForce => Some("gf"),
            Self::PoundForceAvoirdupois => Some("lbf"),
            Self::Kayser => Some("K"),
            Self::Gal => Some("Gal"),
            Self::Dyne => Some("dyn"),
            Self::Erg => Some("erg"),
            Self::Poise => Some("P"),
            Self::Biot => Some("Bi"),
            Self::Stokes => Some("St"),
            Self::Maxwell => Some("Mx"),
            Self::Gauss => Some("Gs"),
            Self::Oersted => Some("Oe"),
            Self::Gilbert => Some("Gb"),
            Self::Stilb => Some("sb"),
            Self::Lambert => Some("L"),
            Self::Phot => Some("ph"),
            Self::Curie => Some("Ci"),
            Self::Roentgen => Some("R"),
            Self::RadiationAbsorbedDose => Some("RAD"),
            Self::RadiationEquivalentMan => Some("REM"),
            Self::InchInternational => Some("in"),
            Self::FootInternational => Some("ft"),
            Self::YardInternational => Some("yd"),
            Self::MileInternational => Some("mi"),
            Self::FathomInternational => Some("fth"),
            Self::NauticalMileInternational => Some("n.mi"),
            Self::KnotInternational => Some("knot"),
            Self::CubicYardInternational => Some("cu.yd"),
            Self::MilInternational => Some("mil"),
            Self::CircularMilInternational => Some("circ.mil"),
            Self::HandInternational => Some("hd"),
            Self::FootUS => Some("ft<sub>us</sub>"),
            Self::FluidOunceUS => Some("oz fl"),
            Self::MetricFluidOunce => Some("oz fl"),
            Self::PoundAvoirdupois => Some("lb"),
            Self::OunceAvoirdupois => Some("oz"),
            Self::DegreeFahrenheit => Some("°F"),
            Self::DegreeRankine => Some("°R"),
            Self::DegreeReaumur => Some("°Ré"),
            Self::CalorieAt15C => Some("cal<sub>15°C</sub>"),
            Self::CalorieAt20C => Some("cal<sub>20°C</sub>"),
            Self::MeanCalorie => Some("cal<sub>m</sub>"),
            Self::InternationalTableCalorie => Some("cal<sub>IT</sub>"),
            Self::ThermochemicalCalorie => Some("cal<sub>th</sub>"),
            Self::Calorie => Some("cal"),
            Self::NutritionLabelCalories => Some("Cal"),
            Self::BritishThermalUnitAt39F => Some("Btu<sub>39°F</sub>"),
            Self::BritishThermalUnitAt59F => Some("Btu<sub>59°F</sub>"),
            Self::BritishThermalUnitAt60F => Some("Btu<sub>60°F</sub>"),
            Self::MeanBritishThermalUnit => Some("Btu<sub>m</sub>"),
            Self::InternationalTableBritishThermalUnit => Some("Btu<sub>IT</sub>"),
            Self::ThermochemicalBritishThermalUnit => Some("Btu<sub>th</sub>"),
            Self::BritishThermalUnit => Some("btu"),
            Self::Tex => Some("tex"),
            Self::Denier => Some("den"),
            Self::MeterOfWaterColumn => Some("m H<sub><r>2</r></sub>O"),
            Self::MeterOfMercuryColumn => Some("m Hg"),
            Self::InchOfWaterColumn => Some("in H<sub><r>2</r></sub>O"),
            Self::InchOfMercuryColumn => Some("in Hg"),
            Self::PeripheralVascularResistanceUnit => Some("P.R.U."),
            Self::WoodUnit => Some("Wood U."),
            Self::Diopter => Some("dpt"),
            Self::PrismDiopter => Some("PD"),
            Self::PercentOfSlope => Some("%"),
            Self::Charriere => Some("Ch"),
            Self::Drop => Some("drp"),
            Self::HounsfieldUnit => Some("HF"),
            Self::MetabolicEquivalent => Some("MET"),
            Self::HomeopathicPotencyOfDecimalSeriesRetired => Some("X"),
            Self::HomeopathicPotencyOfCentesimalSeriesRetired => Some("C"),
            Self::HomeopathicPotencyOfMillesimalSeriesRetired => Some("M"),
            Self::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Some("Q"),
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries => Some("X"),
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries => Some("C"),
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries => Some("M"),
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => Some("Q"),
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries => Some("X"),
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries => Some("C"),
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries => Some("M"),
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => Some("Q"),
            Self::Equivalents => Some("eq"),
            Self::Osmole => Some("osm"),
            Self::PH => Some("pH"),
            Self::GramPercent => Some("g%"),
            Self::SvedbergUnit => Some("S"),
            Self::HighPowerField => Some("HPF"),
            Self::LowPowerField => Some("LPF"),
            Self::Katal => Some("kat"),
            Self::Unit => Some("U"),
            Self::InternationalUnit => Some("IU"),
            Self::InternationalUnitSecondary => Some("i.U."),
            Self::ArbitraryUnit => Some("arb. U"),
            Self::UnitedStatesPharmacopeiaUnit => Some("U.S.P."),
            Self::CellCultureInfectiousDose => Some("CCID<sub>50</sub>"),
            Self::TissueCultureInfectiousDose => Some("TCID<sub>50</sub>"),
            Self::EmbryoInfectiousDose => Some("EID<sub>50</sub>"),
            Self::PlaqueFormingUnits => Some("PFU"),
            Self::FocusFormingUnits => Some("FFU"),
            Self::ColonyFormingUnits => Some("CFU"),
            Self::IndexOfReactivity => Some("IR"),
            Self::BioequivalentAllergenUnit => Some("BAU"),
            Self::AllergenUnit => Some("AU"),
            Self::AllergenUnitForAmbrosiaArtemisiifolia => Some("Amb a 1 U"),
            Self::ProteinNitrogenUnit => Some("PNU"),
            Self::LimitOfFlocculation => Some("Lf"),
            Self::Neper => Some("Np"),
            Self::Bel => Some("B"),
            Self::BelSoundPressure => Some("B(SPL)"),
            Self::BelVolt => Some("B(V)"),
            Self::BelMillivolt => Some("B(mV)"),
            Self::BelMicrovolt => Some("B(μV)"),
            Self::Bel10Nanovolt => Some("B(10 nV)"),
            Self::BelWatt => Some("B(W)"),
            Self::BelKilowatt => Some("B(kW)"),
            Self::Stere => Some("st"),
            Self::Angstrom => Some("Å"),
            Self::Barn => Some("b"),
            Self::TechnicalAtmosphere => Some("at"),
            Self::Mho => Some("mho"),
            Self::PoundPerSqareInch => Some("psi"),
            Self::Circle => Some("circ"),
            Self::Spere => Some("sph"),
            Self::MetricCarat => Some("ct<sub>m</sub>"),
            Self::CaratOfGoldAlloys => Some("ct<sub><r>Au</r></sub>"),
            Self::BitLogarithmusDualis => Some("bit<sub>s</sub>"),
            Self::Bit => Some("bit"),
            Self::Byte => Some("B"),
            Self::Baud => Some("Bd"),
            _ => None,
        }
    }

    fn secondary_code(&self) -> Option<&'static str> {
        match *self {
            Self::Meter => Some("M"),
            Self::Second => Some("S"),
            Self::Gram => Some("G"),
            Self::Radian => Some("RAD"),
            Self::Kelvin => Some("K"),
            Self::Coulomb => Some("C"),
            Self::Candela => Some("CD"),
            Self::TheNumberTenForArbitraryPowersStar => Some("10*"),
            Self::TheNumberTenForArbitraryPowersCaret => Some("10^"),
            Self::TheNumberPi => Some("[PI]"),
            Self::Percent => Some("%"),
            Self::PartsPerThousand => Some("[PPTH]"),
            Self::PartsPerMillion => Some("[PPM]"),
            Self::PartsPerBillion => Some("[PPB]"),
            Self::PartsPerTrillion => Some("[PPTR]"),
            Self::Mole => Some("MOL"),
            Self::Steradian => Some("SR"),
            Self::Hertz => Some("HZ"),
            Self::Newton => Some("N"),
            Self::Pascal => Some("PAL"),
            Self::Joule => Some("J"),
            Self::Watt => Some("W"),
            Self::Ampere => Some("A"),
            Self::Volt => Some("V"),
            Self::Farad => Some("F"),
            Self::Ohm => Some("OHM"),
            Self::Siemens => Some("SIE"),
            Self::Weber => Some("WB"),
            Self::DegreeCelsius => Some("CEL"),
            Self::Tesla => Some("T"),
            Self::Henry => Some("H"),
            Self::Lumen => Some("LM"),
            Self::Lux => Some("LX"),
            Self::Becquerel => Some("BQ"),
            Self::Gray => Some("GY"),
            Self::Sievert => Some("SV"),
            Self::Gon => Some("GON"),
            Self::Degree => Some("DEG"),
            Self::MinuteAngle => Some("'"),
            Self::SecondAngle => Some("''"),
            Self::Liter => Some("L"),
            Self::Are => Some("AR"),
            Self::Minute => Some("MIN"),
            Self::Hour => Some("HR"),
            Self::Day => Some("D"),
            Self::TropicalYear => Some("ANN_T"),
            Self::MeanJulianYear => Some("ANN_J"),
            Self::MeanGregorianYear => Some("ANN_G"),
            Self::Year => Some("ANN"),
            Self::Week => Some("WK"),
            Self::SynodalMonth => Some("MO_S"),
            Self::MeanJulianMonth => Some("MO_J"),
            Self::MeanGregorianMonth => Some("MO_G"),
            Self::Month => Some("MO"),
            Self::Tonne => Some("TNE"),
            Self::Bar => Some("BAR"),
            Self::UnifiedAtomicMassUnit => Some("AMU"),
            Self::Electronvolt => Some("EV"),
            Self::AstronomicUnit => Some("ASU"),
            Self::Parsec => Some("PRS"),
            Self::VelocityOfLight => Some("[C]"),
            Self::PlanckConstant => Some("[H]"),
            Self::BoltzmannConstant => Some("[K]"),
            Self::PermittivityOfVacuum => Some("[EPS_0]"),
            Self::PermeabilityOfVacuum => Some("[MU_0]"),
            Self::ElementaryCharge => Some("[E]"),
            Self::ElectronMass => Some("[M_E]"),
            Self::ProtonMass => Some("[M_P]"),
            Self::NewtonianConstantOfGravitation => Some("[GC]"),
            Self::StandardAccelerationOfFreeFall => Some("[G]"),
            Self::StandardAtmosphere => Some("ATM"),
            Self::LightYear => Some("[LY]"),
            Self::GramForce => Some("GF"),
            Self::PoundForceAvoirdupois => Some("[LBF_AV]"),
            Self::Kayser => Some("KY"),
            Self::Gal => Some("GL"),
            Self::Dyne => Some("DYN"),
            Self::Erg => Some("ERG"),
            Self::Poise => Some("P"),
            Self::Biot => Some("BI"),
            Self::Stokes => Some("ST"),
            Self::Maxwell => Some("MX"),
            Self::Gauss => Some("GS"),
            Self::Oersted => Some("OE"),
            Self::Gilbert => Some("GB"),
            Self::Stilb => Some("SB"),
            Self::Lambert => Some("LMB"),
            Self::Phot => Some("PHT"),
            Self::Curie => Some("CI"),
            Self::Roentgen => Some("ROE"),
            Self::RadiationAbsorbedDose => Some("[RAD]"),
            Self::RadiationEquivalentMan => Some("[REM]"),
            Self::InchInternational => Some("[IN_I]"),
            Self::FootInternational => Some("[FT_I]"),
            Self::YardInternational => Some("[YD_I]"),
            Self::MileInternational => Some("[MI_I]"),
            Self::FathomInternational => Some("[FTH_I]"),
            Self::NauticalMileInternational => Some("[NMI_I]"),
            Self::KnotInternational => Some("[KN_I]"),
            Self::SquareInchInternational => Some("[SIN_I]"),
            Self::SquareFootInternational => Some("[SFT_I]"),
            Self::SquareYardInternational => Some("[SYD_I]"),
            Self::CubicInchInternational => Some("[CIN_I]"),
            Self::CubicFootInternational => Some("[CFT_I]"),
            Self::CubicYardInternational => Some("[CYD_I]"),
            Self::BoardFootInternational => Some("[BF_I]"),
            Self::CordInternational => Some("[CR_I]"),
            Self::MilInternational => Some("[MIL_I]"),
            Self::CircularMilInternational => Some("[CML_I]"),
            Self::HandInternational => Some("[HD_I]"),
            Self::FootUS => Some("[FT_US]"),
            Self::YardUS => Some("[YD_US]"),
            Self::InchUS => Some("[IN_US]"),
            Self::RodUS => Some("[RD_US]"),
            Self::GuntersChainUS => Some("[CH_US]"),
            Self::LinkForGuntersChainUS => Some("[LK_US]"),
            Self::RamdensChainUS => Some("[RCH_US]"),
            Self::LinkForRamdensChainUS => Some("[RLK_US]"),
            Self::FathomUS => Some("[FTH_US]"),
            Self::FurlongUS => Some("[FUR_US]"),
            Self::MileUS => Some("[MI_US]"),
            Self::AcreUS => Some("[ACR_US]"),
            Self::SquareRodUS => Some("[SRD_US]"),
            Self::SquareMileUS => Some("[SMI_US]"),
            Self::Section => Some("[SCT]"),
            Self::Township => Some("[TWP]"),
            Self::MilUS => Some("[MIL_US]"),
            Self::InchBritish => Some("[IN_BR]"),
            Self::FootBritish => Some("[FT_BR]"),
            Self::RodBritish => Some("[RD_BR]"),
            Self::GuntersChainBritish => Some("[CH_BR]"),
            Self::LinkForGuntersChainBritish => Some("[LK_BR]"),
            Self::FathomBritish => Some("[FTH_BR]"),
            Self::PaceBritish => Some("[PC_BR]"),
            Self::YardBritish => Some("[YD_BR]"),
            Self::MileBritish => Some("[MI_BR]"),
            Self::NauticalMileBritish => Some("[NMI_BR]"),
            Self::KnotBritish => Some("[KN_BR]"),
            Self::AcreBritish => Some("[ACR_BR]"),
            Self::QueenAnnesWineGallonUS => Some("[GAL_US]"),
            Self::BarrelUS => Some("[BBL_US]"),
            Self::QuartUS => Some("[QT_US]"),
            Self::PintUS => Some("[PT_US]"),
            Self::GillUS => Some("[GIL_US]"),
            Self::FluidOunceUS => Some("[FOZ_US]"),
            Self::FluidDramUS => Some("[FDR_US]"),
            Self::MinimUS => Some("[MIN_US]"),
            Self::CordUS => Some("[CRD_US]"),
            Self::BushelUS => Some("[BU_US]"),
            Self::HistoricalWinchesterGallon => Some("[GAL_WI]"),
            Self::PeckUS => Some("[PK_US]"),
            Self::DryQuartUS => Some("[DQT_US]"),
            Self::DryPintUS => Some("[DPT_US]"),
            Self::TablespoonUS => Some("[TBS_US]"),
            Self::TeaspoonUS => Some("[TSP_US]"),
            Self::CupUS => Some("[CUP_US]"),
            Self::MetricFluidOunce => Some("[FOZ_M]"),
            Self::MetricCup => Some("[CUP_M]"),
            Self::MetricTeaspoon => Some("[TSP_M]"),
            Self::MetricTablespoon => Some("[TBS_M]"),
            Self::GallonBritish => Some("[GAL_BR]"),
            Self::PeckBritish => Some("[PK_BR]"),
            Self::BushelBritish => Some("[BU_BR]"),
            Self::QuartBritish => Some("[QT_BR]"),
            Self::PintBritish => Some("[PT_BR]"),
            Self::GillBritish => Some("[GIL_BR]"),
            Self::FluidOunceBritish => Some("[FOZ_BR]"),
            Self::FluidDramBritish => Some("[FDR_BR]"),
            Self::MinimBritish => Some("[MIN_BR]"),
            Self::Grain => Some("[GR]"),
            Self::PoundAvoirdupois => Some("[LB_AV]"),
            Self::OunceAvoirdupois => Some("[OZ_AV]"),
            Self::DramAvoirdupois => Some("[DR_AV]"),
            Self::ShortHundredweightAvoirdupois => Some("[SCWT_AV]"),
            Self::LongHunderdweightAvoirdupois => Some("[LCWT_AV]"),
            Self::ShortTonAvoirdupois => Some("[STON_AV]"),
            Self::LongTonAvoirdupois => Some("[LTON_AV]"),
            Self::StoneAvoirdupois => Some("[STONE_AV]"),
            Self::PennyweightTroy => Some("[PWT_TR]"),
            Self::OunceTroy => Some("[OZ_TR]"),
            Self::PoundTroy => Some("[LB_TR]"),
            Self::ScrupleApothecaries => Some("[SC_AP]"),
            Self::DramApothecaries => Some("[DR_AP]"),
            Self::OunceApothecaries => Some("[OZ_AP]"),
            Self::PoundApothecaries => Some("[LB_AP]"),
            Self::MetricOunce => Some("[OZ_M]"),
            Self::Line => Some("[LNE]"),
            Self::Point => Some("[PNT]"),
            Self::Pica => Some("[PCA]"),
            Self::PrintersPoint => Some("[PNT_PR]"),
            Self::PrintersPica => Some("[PCA_PR]"),
            Self::Pied => Some("[PIED]"),
            Self::Pouce => Some("[POUCE]"),
            Self::Ligne => Some("[LIGNE]"),
            Self::Didot => Some("[DIDOT]"),
            Self::Cicero => Some("[CICERO]"),
            Self::DegreeFahrenheit => Some("[DEGF]"),
            Self::DegreeRankine => Some("[degR]"),
            Self::DegreeReaumur => Some("[degRe]"),
            Self::CalorieAt15C => Some("CAL_[15]"),
            Self::CalorieAt20C => Some("CAL_[20]"),
            Self::MeanCalorie => Some("CAL_M"),
            Self::InternationalTableCalorie => Some("CAL_IT"),
            Self::ThermochemicalCalorie => Some("CAL_TH"),
            Self::Calorie => Some("CAL"),
            Self::NutritionLabelCalories => Some("[CAL]"),
            Self::BritishThermalUnitAt39F => Some("[BTU_39]"),
            Self::BritishThermalUnitAt59F => Some("[BTU_59]"),
            Self::BritishThermalUnitAt60F => Some("[BTU_60]"),
            Self::MeanBritishThermalUnit => Some("[BTU_M]"),
            Self::InternationalTableBritishThermalUnit => Some("[BTU_IT]"),
            Self::ThermochemicalBritishThermalUnit => Some("[BTU_TH]"),
            Self::BritishThermalUnit => Some("[BTU]"),
            Self::Horsepower => Some("[HP]"),
            Self::Tex => Some("TEX"),
            Self::Denier => Some("[DEN]"),
            Self::MeterOfWaterColumn => Some("M[H2O]"),
            Self::MeterOfMercuryColumn => Some("M[HG]"),
            Self::InchOfWaterColumn => Some("[IN_I'H2O]"),
            Self::InchOfMercuryColumn => Some("[IN_I'HG]"),
            Self::PeripheralVascularResistanceUnit => Some("[PRU]"),
            Self::WoodUnit => Some("[WOOD'U]"),
            Self::Diopter => Some("[DIOP]"),
            Self::PrismDiopter => Some("[P'DIOP]"),
            Self::PercentOfSlope => Some("%[SLOPE]"),
            Self::MeshInternational => Some("[MESH_I]"),
            Self::Charriere => Some("[CH]"),
            Self::Drop => Some("[DRP]"),
            Self::HounsfieldUnit => Some("[HNSF'U]"),
            Self::MetabolicEquivalent => Some("[MET]"),
            Self::HomeopathicPotencyOfDecimalSeriesRetired => Some("[HP'_X]"),
            Self::HomeopathicPotencyOfCentesimalSeriesRetired => Some("[HP'_C]"),
            Self::HomeopathicPotencyOfMillesimalSeriesRetired => Some("[HP'_M]"),
            Self::HomeopathicPotencyOfQuintamillesimalSeriesRetired => Some("[HP'_Q]"),
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries => Some("[HP_X]"),
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries => Some("[HP_C]"),
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries => Some("[HP_M]"),
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => Some("[HP_Q]"),
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries => Some("[KP_X]"),
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries => Some("[KP_C]"),
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries => Some("[KP_M]"),
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => Some("[KP_Q]"),
            Self::Equivalents => Some("EQ"),
            Self::Osmole => Some("OSM"),
            Self::PH => Some("[PH]"),
            Self::GramPercent => Some("G%"),
            Self::SvedbergUnit => Some("[S]"),
            Self::HighPowerField => Some("[HPF]"),
            Self::LowPowerField => Some("[LPF]"),
            Self::Katal => Some("KAT"),
            Self::Unit => Some("U"),
            Self::InternationalUnit => Some("[IU]"),
            Self::InternationalUnitSecondary => Some("[IU]"),
            Self::ArbitraryUnit => Some("[ARB'U]"),
            Self::UnitedStatesPharmacopeiaUnit => Some("[USP'U]"),
            Self::GplUnit => Some("[GPL'U]"),
            Self::MplUnit => Some("[MPL'U]"),
            Self::AplUnit => Some("[APL'U]"),
            Self::BethesdaUnit => Some("[BETH'U]"),
            Self::AntiFactorXaUnit => Some("[ANTI'XA'U]"),
            Self::ToddUnit => Some("[TODD'U]"),
            Self::DyeUnit => Some("[DYE'U]"),
            Self::SomogyiUnit => Some("[SMGY'U]"),
            Self::BodanskyUnit => Some("[BDSK'U]"),
            Self::KingArmstrongUnit => Some("[KA'U]"),
            Self::KunkelUnit => Some("[KNK'U]"),
            Self::MacLaganUnit => Some("[MCLG'U]"),
            Self::TuberculinUnit => Some("[TB'U]"),
            Self::CellCultureInfectiousDose => Some("[CCID_50]"),
            Self::TissueCultureInfectiousDose => Some("[TCID_50]"),
            Self::EmbryoInfectiousDose => Some("[EID_50]"),
            Self::PlaqueFormingUnits => Some("[PFU]"),
            Self::FocusFormingUnits => Some("[FFU]"),
            Self::ColonyFormingUnits => Some("[CFU]"),
            Self::IndexOfReactivity => Some("[IR]"),
            Self::BioequivalentAllergenUnit => Some("[BAU]"),
            Self::AllergenUnit => Some("[AU]"),
            Self::AllergenUnitForAmbrosiaArtemisiifolia => Some("[AMB'A'1'U]"),
            Self::ProteinNitrogenUnit => Some("[PNU]"),
            Self::LimitOfFlocculation => Some("[LF]"),
            Self::DAntigenUnit => Some("[D'AG'U]"),
            Self::FibrinogenEquivalentUnit => Some("[FEU]"),
            Self::ElisaUnit => Some("[ELU]"),
            Self::EhrlichUnit => Some("[EU]"),
            Self::Neper => Some("NEP"),
            Self::Bel => Some("B"),
            Self::BelSoundPressure => Some("B[SPL]"),
            Self::BelVolt => Some("B[V]"),
            Self::BelMillivolt => Some("B[MV]"),
            Self::BelMicrovolt => Some("B[UV]"),
            Self::Bel10Nanovolt => Some("B[10.NV]"),
            Self::BelWatt => Some("B[W]"),
            Self::BelKilowatt => Some("B[KW]"),
            Self::Stere => Some("STR"),
            Self::Angstrom => Some("AO"),
            Self::Barn => Some("BRN"),
            Self::TechnicalAtmosphere => Some("ATT"),
            Self::Mho => Some("MHO"),
            Self::PoundPerSqareInch => Some("[PSI]"),
            Self::Circle => Some("CIRC"),
            Self::Spere => Some("SPH"),
            Self::MetricCarat => Some("[CAR_M]"),
            Self::CaratOfGoldAlloys => Some("[CAR_AU]"),
            Self::Smoot => Some("[SMOOT]"),
            Self::MeterPerSquareSecondsPerSquareRootOfHertz => Some("[M/S2/HZ^(1/2)]"),
            Self::BitLogarithmusDualis => Some("BIT_S"),
            Self::Bit => Some("BIT"),
            Self::Byte => Some("BY"),
            Self::Baud => Some("BD"),
            _ => None,
        }
    }

    fn definition_value(&self) -> f64 {
        self.definition().value()
    }

    fn definition_unit(&self) -> Unit {
        Unit::from(self.definition().terms().clone())
    }
}

impl UcumUnit for Atom {
    fn scalar(&self) -> f64 {
        self.reduce_value(1.0)
    }

    fn magnitude(&self) -> f64 {
        self.calculate_magnitude(self.scalar())
    }

    fn is_arbitrary(&self) -> bool {
        match *self {
            Self::HomeopathicPotencyOfDecimalHahnemannianSeries => true,
            Self::HomeopathicPotencyOfCentesimalHahnemannianSeries => true,
            Self::HomeopathicPotencyOfMillesimalHahnemannianSeries => true,
            Self::HomeopathicPotencyOfQuintamillesimalHahnemannianSeries => true,
            Self::HomeopathicPotencyOfDecimalKorsakovianSeries => true,
            Self::HomeopathicPotencyOfCentesimalKorsakovianSeries => true,
            Self::HomeopathicPotencyOfMillesimalKorsakovianSeries => true,
            Self::HomeopathicPotencyOfQuintamillesimalKorsakovianSeries => true,
            Self::InternationalUnit => true,
            Self::InternationalUnitSecondary => true,
            Self::ArbitraryUnit => true,
            Self::UnitedStatesPharmacopeiaUnit => true,
            Self::GplUnit => true,
            Self::MplUnit => true,
            Self::AplUnit => true,
            Self::BethesdaUnit => true,
            Self::AntiFactorXaUnit => true,
            Self::ToddUnit => true,
            Self::DyeUnit => true,
            Self::SomogyiUnit => true,
            Self::BodanskyUnit => true,
            Self::KingArmstrongUnit => true,
            Self::KunkelUnit => true,
            Self::MacLaganUnit => true,
            Self::TuberculinUnit => true,
            Self::CellCultureInfectiousDose => true,
            Self::TissueCultureInfectiousDose => true,
            Self::EmbryoInfectiousDose => true,
            Self::PlaqueFormingUnits => true,
            Self::FocusFormingUnits => true,
            Self::ColonyFormingUnits => true,
            Self::IndexOfReactivity => true,
            Self::BioequivalentAllergenUnit => true,
            Self::AllergenUnit => true,
            Self::AllergenUnitForAmbrosiaArtemisiifolia => true,
            Self::ProteinNitrogenUnit => true,
            Self::LimitOfFlocculation => true,
            Self::DAntigenUnit => true,
            Self::FibrinogenEquivalentUnit => true,
            Self::ElisaUnit => true,
            Self::EhrlichUnit => true,
            _ => false,
        }
    }

    fn is_special(&self) -> bool {
        match *self {
            Self::DegreeCelsius => true,
            Self::DegreeFahrenheit => true,
            Self::DegreeReaumur => true,
            Self::PrismDiopter => true,
            Self::PercentOfSlope => true,
            Self::HomeopathicPotencyOfDecimalSeriesRetired => true,
            Self::HomeopathicPotencyOfCentesimalSeriesRetired => true,
            Self::HomeopathicPotencyOfMillesimalSeriesRetired => true,
            Self::HomeopathicPotencyOfQuintamillesimalSeriesRetired => true,
            Self::PH => true,
            Self::Neper => true,
            Self::Bel => true,
            Self::BelSoundPressure => true,
            Self::BelVolt => true,
            Self::BelMillivolt => true,
            Self::BelMicrovolt => true,
            Self::Bel10Nanovolt => true,
            Self::BelWatt => true,
            Self::BelKilowatt => true,
            Self::MeterPerSquareSecondsPerSquareRootOfHertz => true,
            Self::BitLogarithmusDualis => true,
            _ => false,
        }
    }

    fn is_metric(&self) -> bool {
        match *self {
            Self::Meter => true,
            Self::Second => true,
            Self::Gram => true,
            Self::Radian => true,
            Self::Kelvin => true,
            Self::Coulomb => true,
            Self::Candela => true,
            Self::Mole => true,
            Self::Steradian => true,
            Self::Hertz => true,
            Self::Newton => true,
            Self::Pascal => true,
            Self::Joule => true,
            Self::Watt => true,
            Self::Ampere => true,
            Self::Volt => true,
            Self::Farad => true,
            Self::Ohm => true,
            Self::Siemens => true,
            Self::Weber => true,
            Self::DegreeCelsius => true,
            Self::Tesla => true,
            Self::Henry => true,
            Self::Lumen => true,
            Self::Lux => true,
            Self::Becquerel => true,
            Self::Gray => true,
            Self::Sievert => true,
            Self::Liter => true,
            Self::LiterSecondary => true,
            Self::Are => true,
            Self::Tonne => true,
            Self::Bar => true,
            Self::UnifiedAtomicMassUnit => true,
            Self::Electronvolt => true,
            Self::Parsec => true,
            Self::VelocityOfLight => true,
            Self::PlanckConstant => true,
            Self::BoltzmannConstant => true,
            Self::PermittivityOfVacuum => true,
            Self::PermeabilityOfVacuum => true,
            Self::ElementaryCharge => true,
            Self::ElectronMass => true,
            Self::ProtonMass => true,
            Self::NewtonianConstantOfGravitation => true,
            Self::StandardAccelerationOfFreeFall => true,
            Self::LightYear => true,
            Self::GramForce => true,
            Self::Kayser => true,
            Self::Gal => true,
            Self::Dyne => true,
            Self::Erg => true,
            Self::Poise => true,
            Self::Biot => true,
            Self::Stokes => true,
            Self::Maxwell => true,
            Self::Gauss => true,
            Self::Oersted => true,
            Self::Gilbert => true,
            Self::Stilb => true,
            Self::Lambert => true,
            Self::Phot => true,
            Self::Curie => true,
            Self::Roentgen => true,
            Self::RadiationAbsorbedDose => true,
            Self::RadiationEquivalentMan => true,
            Self::CalorieAt15C => true,
            Self::CalorieAt20C => true,
            Self::MeanCalorie => true,
            Self::InternationalTableCalorie => true,
            Self::ThermochemicalCalorie => true,
            Self::Calorie => true,
            Self::Tex => true,
            Self::MeterOfWaterColumn => true,
            Self::MeterOfMercuryColumn => true,
            Self::Equivalents => true,
            Self::Osmole => true,
            Self::GramPercent => true,
            Self::Katal => true,
            Self::Unit => true,
            Self::InternationalUnit => true,
            Self::InternationalUnitSecondary => true,
            Self::Neper => true,
            Self::Bel => true,
            Self::BelSoundPressure => true,
            Self::BelVolt => true,
            Self::BelMillivolt => true,
            Self::BelMicrovolt => true,
            Self::Bel10Nanovolt => true,
            Self::BelWatt => true,
            Self::BelKilowatt => true,
            Self::Stere => true,
            Self::Mho => true,
            Self::Bit => true,
            Self::Byte => true,
            Self::Baud => true,
            _ => false,
        }
    }
}

impl Reducible for Atom {
    fn reduce_value(&self, value: f64) -> f64 {
        self.definition().reduce_value(value)
    }

    fn calculate_magnitude(&self, value: f64) -> f64 {
        if self.is_special() {
            self.definition().calculate_magnitude(value)
        } else {
            1.0
        }
    }
}

impl DefaultCompatibility for Atom {}

impl Composable for Atom {
    fn composition(&self) -> Composition {
        match self {
            Self::Candela => Composition::new(Dimension::LuminousIntensity, 1),
            Self::Coulomb => Composition::new(Dimension::ElectricCharge, 1),
            Self::Gram => Composition::new(Dimension::Mass, 1),
            Self::Kelvin => Composition::new(Dimension::Temperature, 1),
            Self::Meter => Composition::new(Dimension::Length, 1),
            Self::Radian => Composition::new(Dimension::PlaneAngle, 1),
            Self::Second => Composition::new(Dimension::Time, 1),
            _ => self.definition().terms().composition(),
        }
    }
}

impl PartialEq for Atom {
    fn eq(&self, other: &Self) -> bool {
        if !self.is_compatible_with(other) {
            return false;
        }

        self.scalar() == other.scalar()
    }
}

impl fmt::Display for Atom {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.primary_code())
    }
}
